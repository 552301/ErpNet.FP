//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace TremolZFP
{
    public class FP : FPcore
    {
        public FP()
        {
            VersionDef = 1901101636;
        }

        /// <summary>
        /// Provides information about the amounts on hand by type of payment.
        /// </summary>
        public DailyAvailableAmountsRes ReadDailyAvailableAmounts()
        {
            return CreateRes<DailyAvailableAmountsRes>(Do("ReadDailyAvailableAmounts"));
        }

        /// <summary>
        /// Prints an article report with or without zeroing ('Z' or 'X').
        /// </summary>
        /// <param name="optionZeroing">with following values: 
        ///  - 'Z' - Zeroing 
        ///  - 'X' - Without zeroing</param>
        public void PrintArticleReport(OptionZeroing optionZeroing)
        {
            Do("PrintArticleReport", "OptionZeroing", optionZeroing);
        }

        /// <summary>
        /// Provides information about the current (the last value stored into the FM) decimal point format.
        /// </summary>
        public DecimalPoint ReadDecimalPoint()
        {
            return CreateRes<DecimalPoint>(Do("ReadDecimalPoint"));
        }

        /// <summary>
        /// Programs the number of POS, printing of logo, cash drawer opening, cutting permission, external display management mode, article report type, enable or disable currency in receipt, EJ font type and working operators counter.
        /// </summary>
        /// <param name="pOSNum">4 symbols for number of POS in format ####</param>
        /// <param name="optionPrintLogo">1 symbol of value: 
        ///  - '1' - Yes 
        ///  - '0' - No</param>
        /// <param name="optionAutoOpenDrawer">1 symbol of value: 
        ///  - '1' - Yes 
        ///  - '0' - No</param>
        /// <param name="optionAutoCut">1 symbol of value: 
        ///  - '1' - Yes 
        ///  - '0' - No</param>
        /// <param name="optionExternalDispManagement">1 symbol of value: 
        ///  - '1' - Manuel 
        ///  - '0' - Auto</param>
        /// <param name="optionArticleReportType">1 symbol of value: 
        ///  - '1' - Detailed 
        ///  - '0' - Brief</param>
        /// <param name="optionEnableCurrency">1 symbol of value: 
        ///  - '1' - Yes 
        ///  - '0' - No</param>
        /// <param name="optionEJFontType">1 symbol of value: 
        ///  - '1' - Low Font 
        ///  - '0' - Normal Font</param>
        /// <param name="optionWorkOperatorCount">1 symbol of value: 
        ///  - '1' - One 
        ///  - '0' - More</param>
        public void ProgParameters(decimal pOSNum, OptionPrintLogo optionPrintLogo, OptionAutoOpenDrawer optionAutoOpenDrawer, OptionAutoCut optionAutoCut, OptionExternalDispManagement optionExternalDispManagement, OptionArticleReportType optionArticleReportType, OptionEnableCurrency optionEnableCurrency, OptionEJFontType optionEJFontType, OptionWorkOperatorCount optionWorkOperatorCount)
        {
            Do("ProgParameters", "POSNum", pOSNum, "OptionPrintLogo", optionPrintLogo, "OptionAutoOpenDrawer", optionAutoOpenDrawer, "OptionAutoCut", optionAutoCut, "OptionExternalDispManagement", optionExternalDispManagement, "OptionArticleReportType", optionArticleReportType, "OptionEnableCurrency", optionEnableCurrency, "OptionEJFontType", optionEJFontType, "OptionWorkOperatorCount", optionWorkOperatorCount);
        }

        /// <summary>
        /// Provides information about last sent receipt number and date time to NRA server and first unsent receipt number and date time to NRA. If there is no unsent receipt the number will be 0 and date time will be 00-00-0000 00:00 Parameter NRA_ErrorMessage provide error message from NRA server if exist. Command is not allowed if device is deregistered, not fiscalized or in opened receipt.
        /// </summary>
        public SentRcpInfoStatusRes ReadSentRcpInfoStatus()
        {
            return CreateRes<SentRcpInfoStatusRes>(Do("ReadSentRcpInfoStatus"));
        }

        /// <summary>
        /// Print Electronic Journal Report from receipt number to receipt number and selected documents content. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
        /// </summary>
        /// <param name="flagsReceipts">1 symbol for Receipts included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=1 Yes, Flags.5=0 No (Include PO) 
        /// Flags.4=1 Yes, Flags.4=0 No (Include RA) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)</param>
        /// <param name="flagsReports">1 symbol for Reports included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=0 
        /// Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)</param>
        /// <param name="startRcpNum">6 symbols for initial receipt number included in report in format ######.</param>
        /// <param name="endRcpNum">6 symbols for final receipt number included in report in format ######.</param>
        public void PrintEJByRcpNumCustom(byte flagsReceipts, byte flagsReports, decimal startRcpNum, decimal endRcpNum)
        {
            Do("PrintEJByRcpNumCustom", "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartRcpNum", startRcpNum, "EndRcpNum", endRcpNum);
        }

        /// <summary>
        /// Provides information for the programmed data, the turnover from the stated department number
        /// </summary>
        /// <param name="depNum">2 symbols for department number in format: ##</param>
        public DepartmentRes ReadDepartment(decimal depNum)
        {
            return CreateRes<DepartmentRes>(Do("ReadDepartment", "DepNum", depNum));
        }

        /// <summary>
        /// Read the total counter of last issued receipt.
        /// </summary>
        public decimal ReadLastReceiptNum()
        {
            return CreateRes<decimal>(Do("ReadLastReceiptNum"));
        }

        /// <summary>
        /// Stores the Unique Identification Code (UIC) and UIC type into the operative memory.
        /// </summary>
        /// <param name="password">6-symbols string</param>
        /// <param name="uIC">13 symbols for UIC</param>
        /// <param name="optionUICType">1 symbol for type of UIC number:  
        ///  - '0' - Bulstat 
        ///  - '1' - EGN 
        ///  - '2' - Foreigner Number 
        ///  - '3' - NRA Official Number</param>
        public void SetCustomerUIC(string password, string uIC, OptionUICType optionUICType)
        {
            Do("SetCustomerUIC", "Password", password, "UIC", uIC, "OptionUICType", optionUICType);
        }

        /// <summary>
        /// Read Electronic Journal Report from receipt number to receipt number.
        /// </summary>
        /// <param name="optionReportFormat">1 character with value 
        ///  - 'J0' - Detailed EJ 
        ///  - 'J8' - Brief EJ</param>
        /// <param name="startRcpNum">6 symbols for initial receipt number included in report in format ######</param>
        /// <param name="endRcpNum">6 symbols for final receipt number included in report in format ######</param>
        public void ReadEJByReceiptNum(OptionReportFormat optionReportFormat, decimal startRcpNum, decimal endRcpNum)
        {
            Do("ReadEJByReceiptNum", "OptionReportFormat", optionReportFormat, "StartRcpNum", startRcpNum, "EndRcpNum", endRcpNum);
        }

        /// <summary>
        /// Programs the general data for a certain article in the internal database. The price may have variable length, while the name field is fixed.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number in format: #####</param>
        /// <param name="name">34 symbols for article name</param>
        /// <param name="price">Up to 10 symbols for article price</param>
        /// <param name="optionPrice">1 symbol for price flag with next value: 
        ///  - '0'- Free price is disable valid only programmed price 
        ///  - '1'- Free price is enable 
        ///  - '2'- Limited price</param>
        /// <param name="optionVATClass">1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden</param>
        /// <param name="belongToDepNum">BelongToDepNum + 80h, 1 symbol for article 
        /// department attachment, formed in the following manner: 
        /// BelongToDepNum[HEX] + 80h example: Dep01 = 81h, Dep02 = 82h … 
        /// Dep19 = 93h</param>
        /// <param name="optionSingleTransaction">1 symbol with value: 
        ///  - '0' - Inactive, default value 
        ///  - '1' - Active Single transaction in receipt</param>
        public void ProgPLUgeneral(decimal pLUNum, string name, decimal price, OptionPrice optionPrice, OptionVATClass optionVATClass, int belongToDepNum, OptionSingleTransaction optionSingleTransaction)
        {
            Do("ProgPLUgeneral", "PLUNum", pLUNum, "Name", name, "Price", price, "OptionPrice", optionPrice, "OptionVATClass", optionVATClass, "BelongToDepNum", belongToDepNum, "OptionSingleTransaction", optionSingleTransaction);
        }

        /// <summary>
        /// Percent or value discount/addition over sum of transaction or over subtotal sum specified by field "Type".
        /// </summary>
        /// <param name="optionType">1 symbol with value  
        /// - '2' - Defined from the device  
        /// - '1' - Over subtotal 
        /// - '0' - Over transaction sum</param>
        /// <param name="optionSubtotal">1 symbol with value  
        ///  - '1' - Yes  
        ///  - '0' - No</param>
        /// <param name="discAddV">Up to 8 symbols for the value of the discount/addition. 
        /// Use minus sign '-' for discount</param>
        /// <param name="discAddP">Up to 7 symbols for the percentage value of the 
        /// discount/addition. Use minus sign '-' for discount</param>
        public void PrintDiscountOrAddition(OptionType optionType, OptionSubtotal optionSubtotal, decimal? discAddV, decimal? discAddP)
        {
            Do("PrintDiscountOrAddition", "OptionType", optionType, "OptionSubtotal", optionSubtotal, "DiscAddV", discAddV, "DiscAddP", discAddP);
        }

        /// <summary>
        /// Print or store Electronic Journal report with all documents.
        /// </summary>
        /// <param name="optionReportStorage">1 character with value: 
        ///  - 'J1' - Printing 
        ///  - 'J2' - USB storage 
        ///  - 'J4' - SD card storage</param>
        public void PrintOrStoreEJ(OptionReportStorage optionReportStorage)
        {
            Do("PrintOrStoreEJ", "OptionReportStorage", optionReportStorage);
        }

        /// <summary>
        /// Opens the cash drawer.
        /// </summary>
        public void CashDrawerOpen()
        {
            Do("CashDrawerOpen");
        }

        /// <summary>
        /// Provides information about the registers of the specified article
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number in format #####</param>
        public PLU_OldRes ReadPLU_Old(decimal pLUNum)
        {
            return CreateRes<PLU_OldRes>(Do("ReadPLU_Old", "PLUNum", pLUNum));
        }

        /// <summary>
        /// Print a detailed FM payments report by initial and end FM report number.
        /// </summary>
        /// <param name="startZNum">4 symbols for initial FM report number included in report, format ####</param>
        /// <param name="endZNum">4 symbols for final FM report number included in report, format ####</param>
        public void PrintDetailedFMPaymentsReportByZBlocks(decimal startZNum, decimal endZNum)
        {
            Do("PrintDetailedFMPaymentsReportByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
        }

        /// <summary>
        /// Shows a 20-symbols text in the first line and last 20-symbols text in the second line of the external display lines.
        /// </summary>
        /// <param name="text">40 symbols text</param>
        public void DisplayTextLines1and2(string text)
        {
            Do("DisplayTextLines1and2", "Text", text);
        }

        /// <summary>
        /// Register the sell or correction with specified quantity of article from the internal FD database. The FD will perform a correction operation only if the same quantity of the article has already been sold.
        /// </summary>
        /// <param name="optionSign">1 symbol with optional value: 
        ///  - '+' -Sale 
        ///  - '-' - Correction</param>
        /// <param name="pLUNum">5 symbols for PLU number of FD's database in format #####</param>
        /// <param name="price">Up to 10 symbols for sale price</param>
        /// <param name="quantity">Up to 10 symbols for article's quantity sold</param>
        /// <param name="discAddP">Up to 7 for percentage of discount/addition. Use minus 
        /// sign '-' for discount</param>
        /// <param name="discAddV">Up to 8 symbolsfor percentage of discount/addition. 
        /// Use minus sign '-' for discount</param>
        public void SellPLUFromFD_DB(OptionSign optionSign, decimal pLUNum, decimal? price, decimal? quantity, decimal? discAddP, decimal? discAddV)
        {
            Do("SellPLUFromFD_DB", "OptionSign", optionSign, "PLUNum", pLUNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
        }

        /// <summary>
        /// Provides information about the current date and time.
        /// </summary>
        public DateTime ReadDateTime()
        {
            return CreateRes<DateTime>(Do("ReadDateTime"));
        }

        /// <summary>
        /// Register the payment in the receipt with specified type of payment and exact amount received.
        /// </summary>
        /// <param name="optionPaymentType">1 symbol for payment type: 
        ///  - '0' - Payment 0 
        ///  - '1' - Payment 1 
        ///  - '2' - Payment 2 
        ///  - '3' - Payment 3 
        ///  - '4' - Payment 4 
        ///  - '5' - Payment 5 
        ///  - '6' - Payment 6 
        ///  - '7' - Payment 7 
        ///  - '8' - Payment 8 
        ///  - '9' - Payment 9 
        ///  - '10' - Payment 10 
        ///  - '11' - Payment 11</param>
        public void PayExactSum(OptionPaymentType optionPaymentType)
        {
            Do("PayExactSum", "OptionPaymentType", optionPaymentType);
        }

        /// <summary>
        /// Read the number of the remaining free records for Z-report in the Fiscal Memory.
        /// </summary>
        public string ReadFMfreeRecords()
        {
            return CreateRes<string>(Do("ReadFMfreeRecords"));
        }

        /// <summary>
        /// Available only if receipt is not closed. Void all sales in the receipt and close the fiscal receipt (Fiscal receipt, Invoice receipt, Storno receipt or Credit Note). If payment is started, then finish payment and close the receipt.
        /// </summary>
        public void CancelReceipt()
        {
            Do("CancelReceipt");
        }

        /// <summary>
        /// Register the sell (for correction use minus sign in the price field) of article belonging to department with specified name, price, quantity and/or discount/addition on the transaction. The VAT of article got from department to which article belongs.
        /// </summary>
        /// <param name="namePLU">36 symbols for article's name. 34 symbols are printed on paper. 
        /// Symbo 0x7C '|' is new line separator.</param>
        /// <param name="price">Up to 10 symbols for article's price. Use minus sign '-' for correction</param>
        /// <param name="quantity">Up to 10 symbols for quantity</param>
        /// <param name="discAddP">Up to 7 symbols for percentage of discount/addition. 
        /// Use minus sign '-' for discount</param>
        /// <param name="discAddV">Up to 8 symbols for value of discount/addition. 
        /// Use minus sign '-' for discount</param>
        /// <param name="depNum">1 symbol for article department 
        /// attachment, formed in the following manner; example: Dep01=81h, 
        /// Dep02=82h … Dep19=93h</param>
        public void SellPLUfromDep(string namePLU, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV, int depNum)
        {
            Do("SellPLUfromDep", "NamePLU", namePLU, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
        }

        /// <summary>
        /// Provide information about invoice start and end numbers range.
        /// </summary>
        public InvoiceRangeRes ReadInvoiceRange()
        {
            return CreateRes<InvoiceRangeRes>(Do("ReadInvoiceRange"));
        }

        /// <summary>
        /// Print whole special FM events report.
        /// </summary>
        public void PrintSpecialEventsFMreport()
        {
            Do("PrintSpecialEventsFMreport");
        }

        /// <summary>
        /// Open a fiscal storno receipt assigned to the specified operator number and operator password, parameters for receipt format, print VAT, printing type and parameters for the related storno receipt.
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's 
        /// number</param>
        /// <param name="operPass">6 symbols for operator's password</param>
        /// <param name="optionReceiptFormat">1 symbol with value: 
        ///  - '1' - Detailed 
        ///  - '0' - Brief</param>
        /// <param name="optionPrintVAT">1 symbol with value:  
        ///  - '1' - Yes 
        ///  - '0' - No</param>
        /// <param name="optionStornoRcpPrintType">1 symbol with value: 
        /// - '@' - Step by step printing 
        /// - 'B' - Postponed Printing 
        /// - 'D' - Buffered Printing</param>
        /// <param name="optionStornoReason">1 symbol for reason of storno operation with value: 
        ///  - '0' - Operator error 
        ///  - '1' - Goods Claim or Goods return 
        ///  - '2' - Tax relief</param>
        /// <param name="relatedToRcpNum">Up to 6 symbols for issued receipt number</param>
        /// <param name="relatedToRcpDateTime">15 symbols for Date and Time of the issued receipt 
        /// in format DD-MM-YY HH:MM</param>
        /// <param name="fMNum">8 symbols for number of the Fiscal Memory</param>
        /// <param name="relatedToURN">Up to 24 symbols for the issed receipt unique receipt number. 
        /// NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
        /// * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
        /// * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
        /// * YYYYYYY - 7 symbols [0-9] for next number of the receipt</param>
        public void OpenStornoReceipt(decimal operNum, string operPass, OptionReceiptFormat optionReceiptFormat, OptionPrintVAT optionPrintVAT, OptionStornoRcpPrintType optionStornoRcpPrintType, OptionStornoReason optionStornoReason, decimal relatedToRcpNum, DateTime relatedToRcpDateTime, string fMNum, string relatedToURN)
        {
            Do("OpenStornoReceipt", "OperNum", operNum, "OperPass", operPass, "OptionReceiptFormat", optionReceiptFormat, "OptionPrintVAT", optionPrintVAT, "OptionStornoRcpPrintType", optionStornoRcpPrintType, "OptionStornoReason", optionStornoReason, "RelatedToRcpNum", relatedToRcpNum, "RelatedToRcpDateTime", relatedToRcpDateTime, "FMNum", fMNum, "RelatedToURN", relatedToURN);
        }

        /// <summary>
        /// Programs the operator's name and password.
        /// </summary>
        /// <param name="number">Symbols from '1' to '20' corresponding to operator's number</param>
        /// <param name="name">20 symbols for operator's name</param>
        /// <param name="password">6 symbols for operator's password</param>
        public void ProgOperator(decimal number, string name, string password)
        {
            Do("ProgOperator", "Number", number, "Name", name, "Password", password);
        }

        /// <summary>
        /// Print Electronic Journal Report by initial and end date, and selected documents content. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
        /// </summary>
        /// <param name="flagsReceipts">1 symbol for Receipts included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=1 Yes, Flags.5=0 No (Include PO) 
        /// Flags.4=1 Yes, Flags.4=0 No (Include RA) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)</param>
        /// <param name="flagsReports">1 symbol for Reports included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=0 
        /// Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)</param>
        /// <param name="startRepFromDate">6 symbols for initial date in the DDMMYY format</param>
        /// <param name="endRepFromDate">6 symbols for final date in the DDMMYY format</param>
        public void PrintEJByDateCustom(byte flagsReceipts, byte flagsReports, DateTime startRepFromDate, DateTime endRepFromDate)
        {
            Do("PrintEJByDateCustom", "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
        }

        /// <summary>
        /// Provides information about the quantity registers of the specified article.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
        public PLUqtyRes ReadPLUqty(decimal pLUNum)
        {
            return CreateRes<PLUqtyRes>(Do("ReadPLUqty", "PLUNum", pLUNum));
        }

        /// <summary>
        /// Provides information about the manufacturing number of the fiscal device and FM number.
        /// </summary>
        public SerialAndFiscalNumsRes ReadSerialAndFiscalNums()
        {
            return CreateRes<SerialAndFiscalNumsRes>(Do("ReadSerialAndFiscalNums"));
        }

        /// <summary>
        /// Registers cash received on account or paid out.
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20 corresponding to the operator's number</param>
        /// <param name="operPass">4 symbols for operator's password</param>
        /// <param name="amount">Up to 10 symbols for the amount lodged/withdrawn</param>
        /// <param name="text">TextLength-2 symbols. In the beginning and in the end of line symbol '#' is 
        /// printed.</param>
        public void ReceivedOnAccount_PaidOut(decimal operNum, string operPass, decimal amount, string text)
        {
            Do("ReceivedOnAccount_PaidOut", "OperNum", operNum, "OperPass", operPass, "Amount", amount, "Text", text);
        }

        /// <summary>
        /// Executes the direct command .
        /// </summary>
        /// <param name="input">Raw request to FP</param>
        public string DirectCommand(string input)
        {
            return CreateRes<string>(Do("DirectCommand", "Input", input));
        }

        /// <summary>
        /// Reading Electronic Journal Report by number of Z report blocks.
        /// </summary>
        /// <param name="optionReportFormat">1 character with value 
        ///  - 'J0' - Detailed EJ 
        ///  - 'J8' - Brief EJ</param>
        /// <param name="startNo">4 symbols for initial number report in format ####</param>
        /// <param name="endNo">4 symbols for final number report in format ####</param>
        public void ReadEJByZBlocks(OptionReportFormat optionReportFormat, decimal startNo, decimal endNo)
        {
            Do("ReadEJByZBlocks", "OptionReportFormat", optionReportFormat, "StartNo", startNo, "EndNo", endNo);
        }

        /// <summary>
        /// Provides information about the payments in current receipt. This command is valid after receipt closing also.
        /// </summary>
        public CurrentOrLastReceiptPaymentAmountsRes ReadCurrentOrLastReceiptPaymentAmounts()
        {
            return CreateRes<CurrentOrLastReceiptPaymentAmountsRes>(Do("ReadCurrentOrLastReceiptPaymentAmounts"));
        }

        /// <summary>
        /// Provides information about the amounts returned as change by type of payment.
        /// </summary>
        public DailyReturnedChangeAmountsRes ReadDailyReturnedChangeAmounts()
        {
            return CreateRes<DailyReturnedChangeAmountsRes>(Do("ReadDailyReturnedChangeAmounts"));
        }

        /// <summary>
        /// Stores in the memory the graphic file under stated number. Prints information about loaded in the printer graphic files.
        /// </summary>
        /// <param name="logoNumber">1 character value from '0' to '9' setting the number where the logo will be saved.</param>
        public void ProgLogoNum(string logoNumber)
        {
            Do("ProgLogoNum", "LogoNumber", logoNumber);
        }

        /// <summary>
        /// Provides information for the programmed data, the turnovers from the stated department number
        /// </summary>
        /// <param name="depNum">2 symbols for department number in format: ##</param>
        public DepartmentAllRes ReadDepartmentAll(decimal depNum)
        {
            return CreateRes<DepartmentAllRes>(Do("ReadDepartmentAll", "DepNum", depNum));
        }

        /// <summary>
        /// Print a brief FM payments report by initial and end FM report number.
        /// </summary>
        /// <param name="startZNum">4 symbols for the initial FM report number included in report, format ####</param>
        /// <param name="endZNum">4 symbols for the final FM report number included in report, format ####</param>
        public void PrintBriefFMPaymentsReportByZBlocks(decimal startZNum, decimal endZNum)
        {
            Do("PrintBriefFMPaymentsReportByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
        }

        /// <summary>
        /// Print a brief FM payments report by initial and end date.
        /// </summary>
        /// <param name="startDate">6 symbols for initial date in the DDMMYY format</param>
        /// <param name="endDate">6 symbols for final date in the DDMMYY format</param>
        public void PrintBriefFMPaymentsReportByDate(DateTime startDate, DateTime endDate)
        {
            Do("PrintBriefFMPaymentsReportByDate", "StartDate", startDate, "EndDate", endDate);
        }

        /// <summary>
        /// Program customer in FD data base.
        /// </summary>
        /// <param name="customerNum">4 symbols for customer number in format ####</param>
        /// <param name="customerCompanyName">26 symbols for customer name</param>
        /// <param name="customerFullName">16 symbols for Buyer name</param>
        /// <param name="vATNumber">13 symbols for VAT number on customer</param>
        /// <param name="uIC">13 symbols for customer Unique Identification Code</param>
        /// <param name="address">30 symbols for address on customer</param>
        /// <param name="optionUICType">1 symbol for type of Unique Identification Code:  
        ///  - '0' - Bulstat 
        ///  - '1' - EGN 
        ///  - '2' - Foreigner Number 
        ///  - '3' - NRA Official Number</param>
        public void ProgCustomerData(decimal customerNum, string customerCompanyName, string customerFullName, string vATNumber, string uIC, string address, OptionUICType optionUICType)
        {
            Do("ProgCustomerData", "CustomerNum", customerNum, "CustomerCompanyName", customerCompanyName, "CustomerFullName", customerFullName, "VATNumber", vATNumber, "UIC", uIC, "Address", address, "OptionUICType", optionUICType);
        }

        /// <summary>
        /// Register the sell (for correction use minus sign in the price field) of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.
        /// </summary>
        /// <param name="namePLU">36 symbols for article's name. 34 symbols are printed on paper. 
        /// Symbo 0x7C '|' is new line separator.</param>
        /// <param name="optionVATClass">1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden</param>
        /// <param name="price">Up to 10 symbols for article's price. Use minus sign '-' for correction</param>
        /// <param name="quantity">Up to 10 symbols for quantity</param>
        /// <param name="discAddP">Up to 7 symbols for percentage of discount/addition. 
        /// Use minus sign '-' for discount</param>
        /// <param name="discAddV">Up to 8 symbols for value of discount/addition. 
        /// Use minus sign '-' for discount</param>
        public void SellPLUwithSpecifiedVAT(string namePLU, OptionVATClass optionVATClass, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV)
        {
            Do("SellPLUwithSpecifiedVAT", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
        }

        /// <summary>
        /// Print a brief FM report by initial and end date.
        /// </summary>
        /// <param name="startDate">6 symbols for initial date in the DDMMYY format</param>
        /// <param name="endDate">6 symbols for final date in the DDMMYY format</param>
        public void PrintBriefFMReportByDate(DateTime startDate, DateTime endDate)
        {
            Do("PrintBriefFMReportByDate", "StartDate", startDate, "EndDate", endDate);
        }

        /// <summary>
        /// Shows a 20-symbols text in the upper external display line.
        /// </summary>
        /// <param name="text">20 symbols text</param>
        public void DisplayTextLine1(string text)
        {
            Do("DisplayTextLine1", "Text", text);
        }

        /// <summary>
        /// Provides information about the current VAT rates which are the last values stored into the FM.
        /// </summary>
        public VATratesRes ReadVATrates()
        {
            return CreateRes<VATratesRes>(Do("ReadVATrates"));
        }

        /// <summary>
        /// Provides information about the amounts received from sales by type of payment.
        /// </summary>
        public DailyReceivedSalesAmountsRes ReadDailyReceivedSalesAmounts()
        {
            return CreateRes<DailyReceivedSalesAmountsRes>(Do("ReadDailyReceivedSalesAmounts"));
        }

        /// <summary>
        /// Programs available quantity and Quantiy type for a certain article in the internal database.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number in format: #####</param>
        /// <param name="availableQuantity">Up to 11 symbols for available quantity in stock</param>
        /// <param name="optionQuantityType">1 symbol for Quantity flag with next value:  
        ///  - '0'- Availability of PLU stock is not monitored  
        ///  - '1'- Disable negative quantity  
        ///  - '2'- Enable negative quantity</param>
        public void ProgPLUqty(decimal pLUNum, decimal availableQuantity, OptionQuantityType optionQuantityType)
        {
            Do("ProgPLUqty", "PLUNum", pLUNum, "AvailableQuantity", availableQuantity, "OptionQuantityType", optionQuantityType);
        }

        /// <summary>
        /// Provides information about the programmed VAT number, type of VAT number, register number in NRA and Date of registration in NRA.
        /// </summary>
        public RegistrationInfoRes ReadRegistrationInfo()
        {
            return CreateRes<RegistrationInfoRes>(Do("ReadRegistrationInfo"));
        }

        /// <summary>
        /// Clears the external display.
        /// </summary>
        public void ClearDisplay()
        {
            Do("ClearDisplay");
        }

        /// <summary>
        /// Programs the data for a certain article (item) in the internal database. The price may have variable length, while the name field is fixed.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number in format: #####</param>
        /// <param name="name">20 symbols for article name</param>
        /// <param name="price">Up to 10 symbols for article price</param>
        /// <param name="optionVATClass">1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden</param>
        /// <param name="belongToDepNum">BelongToDepNum + 80h, 1 symbol for article 
        /// department attachment, formed in the following manner:</param>
        public void ProgPLU_Old(decimal pLUNum, string name, decimal price, OptionVATClass optionVATClass, int belongToDepNum)
        {
            Do("ProgPLU_Old", "PLUNum", pLUNum, "Name", name, "Price", price, "OptionVATClass", optionVATClass, "BelongToDepNum", belongToDepNum);
        }

        /// <summary>
        /// Register the sell (for correction use minus sign in the price field) of article with specified name, price, fractional quantity, VAT class and/or discount/addition on the transaction.
        /// </summary>
        /// <param name="namePLU">36 symbols for article's name. 34 symbols are printed on paper. 
        /// Symbo 0x7C '|' is new line separator.</param>
        /// <param name="optionVATClass">1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden</param>
        /// <param name="price">Up to 10 symbols for article's price. Use minus sign '-' for correction</param>
        /// <param name="quantity">From 3 to 10 symbols for quantity in format fractional format, e.g. 1/3</param>
        /// <param name="discAddP">1 to 7 symbols for percentage of discount/addition. Use 
        /// minus sign '-' for discount</param>
        /// <param name="discAddV">1 to 8 symbols for value of discount/addition. Use 
        /// minus sign '-' for discount</param>
        public void SellFractQtyPLUwithSpecifiedVAT(string namePLU, OptionVATClass optionVATClass, decimal price, string quantity, decimal? discAddP, decimal? discAddV)
        {
            Do("SellFractQtyPLUwithSpecifiedVAT", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
        }

        /// <summary>
        /// Read the PO by type of payment and the total number of operations by specified operator
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's number</param>
        public DailyPObyOperatorRes ReadDailyPObyOperator(decimal operNum)
        {
            return CreateRes<DailyPObyOperatorRes>(Do("ReadDailyPObyOperator", "OperNum", operNum));
        }

        /// <summary>
        /// Program the content of the header UIC prefix.
        /// </summary>
        /// <param name="headerUICprefix">12 symbols for header UIC prefix</param>
        public void ProgHeaderUICprefix(string headerUICprefix)
        {
            Do("ProgHeaderUICprefix", "HeaderUICprefix", headerUICprefix);
        }

        /// <summary>
        /// Programs price and price type for a certain article in the internal database.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number in format: #####</param>
        /// <param name="price">Up to 10 symbols for article price</param>
        /// <param name="optionPrice">1 symbol for price flag with next value: 
        ///  - '0'- Free price is disable valid only programmed price 
        ///  - '1'- Free price is enable 
        ///  - '2'- Limited price</param>
        public void ProgPLUprice(decimal pLUNum, decimal price, OptionPrice optionPrice)
        {
            Do("ProgPLUprice", "PLUNum", pLUNum, "Price", price, "OptionPrice", optionPrice);
        }

        /// <summary>
        ///  Reads raw bytes from FP.
        /// </summary>
        /// <param name="count">How many bytes to read if EndChar is not specified</param>
        /// <param name="endChar">The character marking the end of the data. If present Count parameter is ignored.</param>
        public byte[] RawRead(decimal count, string endChar)
        {
            return CreateRes<byte[]>(Do("RawRead", "Count", count, "EndChar", endChar));
        }

        /// <summary>
        /// Provides information about the QR code data in last issued receipt.
        /// </summary>
        public string ReadLastReceiptQRcodeData()
        {
            return CreateRes<string>(Do("ReadLastReceiptQRcodeData"));
        }

        /// <summary>
        /// Program the contents of a header lines.
        /// </summary>
        /// <param name="optionHeaderLine">1 symbol with value: 
        ///  - '1' - Header 1 
        ///  - '2' - Header 2 
        ///  - '3' - Header 3 
        ///  - '4' - Header 4 
        ///  - '5' - Header 5 
        ///  - '6' - Header 6 
        ///  - '7' - Header 7</param>
        /// <param name="headerText">TextLength symbols for header lines</param>
        public void ProgHeader(OptionHeaderLine optionHeaderLine, string headerText)
        {
            Do("ProgHeader", "OptionHeaderLine", optionHeaderLine, "HeaderText", headerText);
        }

        /// <summary>
        /// Sets logo number, which is active and will be printed as logo in the receipt header. Print information about active number.
        /// </summary>
        /// <param name="logoNumber">1 character value from '0' to '9' or '?'. The number sets the active file, and 
        /// the '?' invokes only printing of information</param>
        public void SetActiveLogoNum(string logoNumber)
        {
            Do("SetActiveLogoNum", "LogoNumber", logoNumber);
        }

        /// <summary>
        /// Closes the non-fiscal receipt.
        /// </summary>
        public void CloseNonFiscalReceipt()
        {
            Do("CloseNonFiscalReceipt");
        }

        /// <summary>
        /// Stores in the memory the graphic file under number 0. Prints information  about loaded in the printer graphic files.
        /// </summary>
        /// <param name="bMPfile">*BMP file with fixed size 9022 bytes</param>
        public void ProgLogo(string bMPfile)
        {
            Do("ProgLogo", "BMPfile", bMPfile);
        }

        /// <summary>
        /// Shows the current date and time on the external display.
        /// </summary>
        public void DisplayDateTime()
        {
            Do("DisplayDateTime");
        }

        /// <summary>
        /// Print or store Electronic Journal Report by initial and end date.
        /// </summary>
        /// <param name="optionReportStorage">1 character with value: 
        ///  - 'J1' - Printing 
        ///  - 'J2' - USB storage 
        ///  - 'J4' - SD card storage</param>
        /// <param name="startRepFromDate">6 symbols for initial date in the DDMMYY format</param>
        /// <param name="endRepFromDate">6 symbols for final date in the DDMMYY format</param>
        public void PrintOrStoreEJByDate(OptionReportStorage optionReportStorage, DateTime startRepFromDate, DateTime endRepFromDate)
        {
            Do("PrintOrStoreEJByDate", "OptionReportStorage", optionReportStorage, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
        }

        /// <summary>
        /// Print Electronic Journal Report by number of Z report blocks and selected documents content. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
        /// </summary>
        /// <param name="flagsReceipts">1 symbol for Receipts included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=1 Yes, Flags.5=0 No (Include PO) 
        /// Flags.4=1 Yes, Flags.4=0 No (Include RA) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)</param>
        /// <param name="flagsReports">1 symbol for Reports included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=0 
        /// Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)</param>
        /// <param name="startZNum">4 symbols for initial number report in format ####</param>
        /// <param name="endZNum">4 symbols for final number report in format ####</param>
        public void PrintEJByZBlocksCustom(byte flagsReceipts, byte flagsReports, decimal startZNum, decimal endZNum)
        {
            Do("PrintEJByZBlocksCustom", "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartZNum", startZNum, "EndZNum", endZNum);
        }

        /// <summary>
        /// Feeds one line of paper.
        /// </summary>
        public void PaperFeed()
        {
            Do("PaperFeed");
        }

        /// <summary>
        /// Close the fiscal receipt (Fiscal receipt, Invoice receipt, Storno receipt, Credit Note or Non-fical receipt). When the payment is finished.
        /// </summary>
        public void CloseReceipt()
        {
            Do("CloseReceipt");
        }

        /// <summary>
        /// Registers the sell (for correction use minus sign in the price field)  of article with specified department, name, price, quantity and/or discount/addition on  the transaction.
        /// </summary>
        /// <param name="namePLU">36 symbols for name of sale. 34 symbols are printed on 
        /// paper. Symbo 0x7C '|' is new line separator.</param>
        /// <param name="depNum">1 symbol for article department 
        /// attachment, formed in the following manner: DepNum[HEX] + 80h 
        /// example: Dep01 = 81h, Dep02 = 82h … Dep19 = 93h</param>
        /// <param name="price">Up to 10 symbols for article's price. Use minus sign '-' for correction</param>
        /// <param name="quantity">Up to 10symbols for article's quantity sold</param>
        /// <param name="discAddP">Up to 7 for percentage of discount/addition. Use 
        /// minus sign '-' for discount</param>
        /// <param name="discAddV">Up to 8 symbols for percentage of 
        /// discount/addition. Use minus sign '-' for discount</param>
        public void SellPLUfromDep_(string namePLU, int depNum, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV)
        {
            Do("SellPLUfromDep_", "NamePLU", namePLU, "DepNum", depNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
        }

        /// <summary>
        /// Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
        /// </summary>
        /// <param name="operNum">Symbol from 1 to 20 corresponding to operator's 
        /// number</param>
        /// <param name="operPass">6 symbols for operator's password</param>
        /// <param name="optionInvoiceCreditNotePrintType">1 symbol with value: 
        /// - 'A' - Step by step printing 
        /// - 'C' - Postponed Printing 
        /// - 'E' - Buffered Printing</param>
        /// <param name="recipient">26 symbols for Invoice recipient</param>
        /// <param name="buyer">16 symbols for Invoice buyer</param>
        /// <param name="vATNumber">13 symbols for customer Fiscal number</param>
        /// <param name="uIC">13 symbols for customer Unique Identification Code</param>
        /// <param name="address">30 symbols for Address</param>
        /// <param name="optionUICType">1 symbol for type of Unique Identification Code:  
        ///  - '0' - Bulstat 
        ///  - '1' - EGN 
        ///  - '2' - Foreigner Number 
        ///  - '3' - NRA Official Number</param>
        /// <param name="optionStornoReason">1 symbol for reason of storno operation with value: 
        ///  - '0' - Operator error 
        ///  - '1' - Goods Claim or Goods return 
        ///  - '2' - Tax relief</param>
        /// <param name="relatedToInvoiceNum">10 symbols for issued invoice number</param>
        /// <param name="relatedToInvoiceDateTime">15 symbols for issued invoice date and time in format</param>
        /// <param name="relatedToRcpNum">Up to 6 symbols for issued receipt number</param>
        /// <param name="fMNum">8 symbols for number of the Fiscal Memory</param>
        /// <param name="relatedToURN">Up to 24 symbols for the issed invoice receipt unique receipt number. 
        /// NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
        /// * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device 
        /// number, 
        /// * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
        /// * YYYYYYY - 7 symbols [0-9] for next number of the receipt</param>
        public void OpenCreditNoteWithFreeCustomerData(decimal operNum, string operPass, OptionInvoiceCreditNotePrintType optionInvoiceCreditNotePrintType, string recipient, string buyer, string vATNumber, string uIC, string address, OptionUICType optionUICType, OptionStornoReason optionStornoReason, string relatedToInvoiceNum, DateTime relatedToInvoiceDateTime, decimal relatedToRcpNum, string fMNum, string relatedToURN)
        {
            Do("OpenCreditNoteWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "OptionInvoiceCreditNotePrintType", optionInvoiceCreditNotePrintType, "Recipient", recipient, "Buyer", buyer, "VATNumber", vATNumber, "UIC", uIC, "Address", address, "OptionUICType", optionUICType, "OptionStornoReason", optionStornoReason, "RelatedToInvoiceNum", relatedToInvoiceNum, "RelatedToInvoiceDateTime", relatedToInvoiceDateTime, "RelatedToRcpNum", relatedToRcpNum, "FMNum", fMNum, "RelatedToURN", relatedToURN);
        }

        /// <summary>
        /// Prints barcode from type stated by CodeType and CodeLen and with data stated in CodeData field.
        /// </summary>
        /// <param name="optionCodeType">1 symbol with possible values: 
        ///  - '0' - UPC A 
        ///  - '1' - UPC E 
        ///  - '2' - EAN 13 
        ///  - '3' - EAN 8 
        ///  - '4' - CODE 39 
        ///  - '5' - ITF 
        ///  - '6' - CODABAR 
        ///  - 'H' - CODE 93 
        ///  - 'I' - CODE 128</param>
        /// <param name="codeLen">Up to 2 bytes for number of bytes according to the table</param>
        /// <param name="codeData">Up to 100 bytes data in range according to the table</param>
        public void PrintBarcode(OptionCodeType optionCodeType, decimal codeLen, string codeData)
        {
            Do("PrintBarcode", "OptionCodeType", optionCodeType, "CodeLen", codeLen, "CodeData", codeData);
        }

        /// <summary>
        /// Provides information about the accumulated sale and storno amounts by VAT group.
        /// </summary>
        public DailySaleAndStornoAmountsByVATRes ReadDailySaleAndStornoAmountsByVAT()
        {
            return CreateRes<DailySaleAndStornoAmountsByVATRes>(Do("ReadDailySaleAndStornoAmountsByVAT"));
        }

        /// <summary>
        /// Print a department report with or without zeroing ('Z' or 'X').
        /// </summary>
        /// <param name="optionZeroing">1 symbol with value: 
        ///  - 'Z' - Zeroing 
        ///  - 'X' - Without zeroing</param>
        public void PrintDepartmentReport(OptionZeroing optionZeroing)
        {
            Do("PrintDepartmentReport", "OptionZeroing", optionZeroing);
        }

        /// <summary>
        /// Read or Store Electronic Journal report by CSV format option and document content selecting. If CSV format is set the content can includes only fiscal receipts. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
        /// </summary>
        /// <param name="optionStorageReport">1 character with value 
        ///  - 'j0' - To PC 
        ///  - 'j2' - To USB Flash Drive 
        ///  - 'j4' - To SD card</param>
        /// <param name="optionCSVformat">1 symbol with value: 
        ///  - 'C' - Yes 
        ///  - 'X' - No</param>
        /// <param name="flagsReceipts">1 symbol for Receipts included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=1 Yes, Flags.5=0 No (Include PO) 
        /// Flags.4=1 Yes, Flags.4=0 No (Include RA) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)</param>
        /// <param name="flagsReports">1 symbol for Reports included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=0 
        /// Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)</param>
        public void ReadEJCustom(OptionStorageReport optionStorageReport, OptionCSVformat optionCSVformat, byte flagsReceipts, byte flagsReports)
        {
            Do("ReadEJCustom", "OptionStorageReport", optionStorageReport, "OptionCSVformat", optionCSVformat, "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports);
        }

        /// <summary>
        /// Shows a 20-symbols text in the lower external display line.
        /// </summary>
        /// <param name="text">20 symbols text</param>
        public void DisplayTextLine2(string text)
        {
            Do("DisplayTextLine2", "Text", text);
        }

        /// <summary>
        /// Provides information about the current reading of the daily-report- with-zeroing counter, the number of the last block stored in FM, the number of EJ and the date and time of the last block storage in the FM.
        /// </summary>
        public DailyCountersRes ReadDailyCounters()
        {
            return CreateRes<DailyCountersRes>(Do("ReadDailyCounters"));
        }

        /// <summary>
        /// Print Electronic Journal report with selected documents content. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
        /// </summary>
        /// <param name="flagsReceipts">1 symbol for Receipts included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=1 Yes, Flags.5=0 No (Include PO) 
        /// Flags.4=1 Yes, Flags.4=0 No (Include RA) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)</param>
        /// <param name="flagsReports">1 symbol for Reports included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=0 
        /// Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)</param>
        public void PrintEJCustom(byte flagsReceipts, byte flagsReports)
        {
            Do("PrintEJCustom", "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports);
        }

        /// <summary>
        /// Erase all articles in PLU database.
        /// </summary>
        /// <param name="password">6 symbols for password</param>
        public void EraseAllPLUs(string password)
        {
            Do("EraseAllPLUs", "Password", password);
        }

        /// <summary>
        /// Confirm Unique Identification Code (UIC) and UIC type into the operative memory.
        /// </summary>
        /// <param name="password">6-symbols string</param>
        public void ConfirmFiscalization(string password)
        {
            Do("ConfirmFiscalization", "Password", password);
        }

        /// <summary>
        /// Read the RA by type of payment and the total number of operations by specified operator.
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20corresponding to operator's number</param>
        public DailyRAbyOperatorRes ReadDailyRAbyOperator(decimal operNum)
        {
            return CreateRes<DailyRAbyOperatorRes>(Do("ReadDailyRAbyOperator", "OperNum", operNum));
        }

        /// <summary>
        /// Provides information about daily turnover on the FD client display
        /// </summary>
        public void DisplayDailyTurnover()
        {
            Do("DisplayDailyTurnover");
        }

        /// <summary>
        /// Provides the content of the header lines
        /// </summary>
        /// <param name="optionHeaderLine">1 symbol with value: 
        ///  - '1' - Header 1 
        ///  - '2' - Header 2 
        ///  - '3' - Header 3 
        ///  - '4' - Header 4 
        ///  - '5' - Header 5 
        ///  - '6' - Header 6 
        ///  - '7' - Header 7</param>
        public HeaderRes ReadHeader(OptionHeaderLine optionHeaderLine)
        {
            return CreateRes<HeaderRes>(Do("ReadHeader", "OptionHeaderLine", optionHeaderLine));
        }

        /// <summary>
        /// Start paper cutter. The command works only in fiscal printer devices.
        /// </summary>
        public void CutPaper()
        {
            Do("CutPaper");
        }

        /// <summary>
        /// Set invoice start and end number range. To execute the command is necessary to grand following condition: the number range to be spent, not used, or not set after the last RAM reset.
        /// </summary>
        /// <param name="startNum">10 characters for start number in format: ##########</param>
        /// <param name="endNum">10 characters for end number in format: ##########</param>
        public void SetInvoiceRange(decimal startNum, decimal endNum)
        {
            Do("SetInvoiceRange", "StartNum", startNum, "EndNum", endNum);
        }

        /// <summary>
        /// Programs Barcode of article in the internal database.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number in format: #####</param>
        /// <param name="barcode">13 symbols for barcode</param>
        public void ProgPLUbarcode(decimal pLUNum, string barcode)
        {
            Do("ProgPLUbarcode", "PLUNum", pLUNum, "Barcode", barcode);
        }

        /// <summary>
        /// Prints a detailed FM report by initial and end date.
        /// </summary>
        /// <param name="startDate">6 symbols for initial date in the DDMMYY format</param>
        /// <param name="endDate">6 symbols for final date in the DDMMYY format</param>
        public void PrintDetailedFMReportByDate(DateTime startDate, DateTime endDate)
        {
            Do("PrintDetailedFMReportByDate", "StartDate", startDate, "EndDate", endDate);
        }

        /// <summary>
        /// Print or store Electronic Journal Report from by number of Z report blocks.
        /// </summary>
        /// <param name="optionReportStorage">1 character with value: 
        ///  - 'J1' - Printing 
        ///  - 'J2' - USB storage 
        ///  - 'J4' - SD card storage</param>
        /// <param name="startZNum">4 symbols for initial number report in format ####</param>
        /// <param name="endZNum">4 symbols for final number report in format ####</param>
        public void PrintOrStoreEJByZBlocks(OptionReportStorage optionReportStorage, decimal startZNum, decimal endZNum)
        {
            Do("PrintOrStoreEJByZBlocks", "OptionReportStorage", optionReportStorage, "StartZNum", startZNum, "EndZNum", endZNum);
        }

        /// <summary>
        /// Register the sell (for correction use minus sign in the price field) of article with specified VAT. If department is present the relevant accumulations are perfomed in its registers.
        /// </summary>
        /// <param name="namePLU">36 symbols for article's name. 34 symbols are printed on paper. 
        /// Symbo 0x7C '|' is new line separator.</param>
        /// <param name="optionVATClass">1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden</param>
        /// <param name="price">Up to 10 symbols for article's price. Use minus sign '-' for correction</param>
        /// <param name="quantity">From 3 to 10 symbols for quantity in format fractional format, e.g. 1/3</param>
        /// <param name="discAddP">Up to 7 symbols for percentage of discount/addition. 
        /// Use minus sign '-' for discount</param>
        /// <param name="discAddV">Up to 8 symbols for value of discount/addition. 
        /// Use minus sign '-' for discount</param>
        /// <param name="depNum">1 symbol for article department 
        /// attachment, formed in the following manner; example: Dep01 = 81h, Dep02 
        /// = 82h … Dep19 = 93h</param>
        public void SellFractQtyPLUwithSpecifiedVATfromDep(string namePLU, OptionVATClass optionVATClass, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV, int depNum)
        {
            Do("SellFractQtyPLUwithSpecifiedVATfromDep", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
        }

        /// <summary>
        /// Provides information about the general registers of the specified article.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
        public PLUgeneralRes ReadPLUgeneral(decimal pLUNum)
        {
            return CreateRes<PLUgeneralRes>(Do("ReadPLUgeneral", "PLUNum", pLUNum));
        }

        /// <summary>
        /// Read the amounts received from sales by type of payment and specified operator.
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's 
        /// number</param>
        public DailyReceivedSalesAmountsByOperatorRes ReadDailyReceivedSalesAmountsByOperator(decimal operNum)
        {
            return CreateRes<DailyReceivedSalesAmountsByOperatorRes>(Do("ReadDailyReceivedSalesAmountsByOperator", "OperNum", operNum));
        }

        /// <summary>
        /// Provide information for specified customer from FD data base.
        /// </summary>
        /// <param name="customerNum">4 symbols for customer number in format ####</param>
        public CustomerDataRes ReadCustomerData(decimal customerNum)
        {
            return CreateRes<CustomerDataRes>(Do("ReadCustomerData", "CustomerNum", customerNum));
        }

        /// <summary>
        /// Read the current status of the receipt.
        /// </summary>
        public CurrentReceiptInfoRes ReadCurrentReceiptInfo()
        {
            return CreateRes<CurrentReceiptInfoRes>(Do("ReadCurrentReceiptInfo"));
        }

        /// <summary>
        /// Opens a fiscal invoice receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
        /// </summary>
        /// <param name="operNum">Symbol from 1 to 20 corresponding to operator's 
        /// number</param>
        /// <param name="operPass">6 symbols for operator's password</param>
        /// <param name="optionInvoicePrintType">1 symbol with value: 
        /// - '1' - Step by step printing 
        /// - '3' - Postponed Printing 
        /// - '5' - Buffered Printing</param>
        /// <param name="customerNum">Symbol '#' and following up to 4 symbols for related customer ID number 
        /// corresponding to the FD database</param>
        /// <param name="uniqueReceiptNumber">Up to 24 symbols for unique receipt number. 
        /// NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
        /// * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
        /// * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
        /// * YYYYYYY - 7 symbols [0-9] for next number of the receipt</param>
        public void OpenInvoiceWithFDCustomerDB(decimal operNum, string operPass, OptionInvoicePrintType optionInvoicePrintType, string customerNum, string uniqueReceiptNumber)
        {
            Do("OpenInvoiceWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "OptionInvoicePrintType", optionInvoicePrintType, "CustomerNum", customerNum, "UniqueReceiptNumber", uniqueReceiptNumber);
        }

        /// <summary>
        /// Provides information about all the registers of the specified article.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
        public PLUallDataRes ReadPLUallData(decimal pLUNum)
        {
            return CreateRes<PLUallDataRes>(Do("ReadPLUallData", "PLUNum", pLUNum));
        }

        /// <summary>
        /// Read Electronic Journal report with all documents.
        /// </summary>
        /// <param name="optionReportFormat">1 character with value 
        ///  - 'J0' - Detailed EJ 
        ///  - 'J8' - Brief EJ</param>
        public void ReadEJ(OptionReportFormat optionReportFormat)
        {
            Do("ReadEJ", "OptionReportFormat", optionReportFormat);
        }

        /// <summary>
        /// Register the payment in the receipt with specified type of payment with amount received.
        /// </summary>
        /// <param name="optionPaymentType">1 symbol for payment type: 
        ///  - '0' - Payment 0 
        ///  - '1' - Payment 1 
        ///  - '2' - Payment 2 
        ///  - '3' - Payment 3 
        ///  - '4' - Payment 4 
        ///  - '5' - Payment 5 
        ///  - '6' - Payment 6 
        ///  - '7' - Payment 7 
        ///  - '8' - Payment 8 
        ///  - '9' - Payment 9 
        ///  - '10' - Payment 10 
        ///  - '11' - Payment 11</param>
        /// <param name="optionChange">Default value is 0, 1 symbol with value: 
        ///  - '0 - With Change 
        ///  - '1' - Without Change</param>
        /// <param name="amount">Up to 10 characters for received amount</param>
        /// <param name="optionChangeType">1 symbols with value: 
        ///  - '0' - Change In Cash 
        ///  - '1' - Same As The payment 
        ///  - '2' - Change In Currency</param>
        public void Payment(OptionPaymentType optionPaymentType, OptionChange optionChange, decimal amount, OptionChangeType? optionChangeType)
        {
            Do("Payment", "OptionPaymentType", optionPaymentType, "OptionChange", optionChange, "Amount", amount, "OptionChangeType", optionChangeType);
        }

        /// <summary>
        /// Provides consequently information about every single block stored in the FM starting with Acknowledgements and ending with end message.
        /// </summary>
        public void ReadFMcontent()
        {
            Do("ReadFMcontent");
        }

        /// <summary>
        /// Read date and number of last Z-report and last RAM reset event.
        /// </summary>
        public LastDailyReportInfoRes ReadLastDailyReportInfo()
        {
            return CreateRes<LastDailyReportInfoRes>(Do("ReadLastDailyReportInfo"));
        }

        /// <summary>
        /// Print a free text. The command can be executed only if receipt is opened (Fiscal receipt, Invoice receipt, Storno receipt, Credit Note or Non-fical receipt). In the beginning and in the end of line symbol '#' is printed.
        /// </summary>
        /// <param name="text">TextLength-2 symbols</param>
        public void PrintText(string text)
        {
            Do("PrintText", "Text", text);
        }

        /// <summary>
        /// Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
        /// </summary>
        /// <param name="operNum">Symbol from 1 to 20 corresponding to operator's 
        /// number</param>
        /// <param name="operPass">6 symbols for operator's password</param>
        /// <param name="optionInvoiceCreditNotePrintType">1 symbol with value: 
        /// - 'A' - Step by step printing 
        /// - 'C' - Postponed Printing 
        /// - 'E' - Buffered Printing</param>
        /// <param name="customerNum">Symbol '#' and following up to 4 symbols for related customer 
        /// ID number corresponding to the FD database</param>
        /// <param name="optionStornoReason">1 symbol for reason of storno operation with value: 
        ///  - '0' - Operator error 
        ///  - '1' - Goods Claim or Goods return 
        ///  - '2' - Tax relief</param>
        /// <param name="relatedToInvoiceNum">10 symbols for issued invoice number</param>
        /// <param name="relatedToInvoiceDateTime">15 symbols for issued invoice date and time in format</param>
        /// <param name="relatedToRcpNum">Up to 6 symbols for issued receipt number</param>
        /// <param name="fMNum">8 symbols for number of the Fiscal Memory</param>
        /// <param name="relatedToURN">Up to 24 symbols for the issed invoice receipt unique receipt number. 
        /// NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
        /// * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device 
        /// number, 
        /// * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
        /// * YYYYYYY - 7 symbols [0-9] for next number of the receipt</param>
        public void OpenCreditNoteWithFDCustomerDB(decimal operNum, string operPass, OptionInvoiceCreditNotePrintType optionInvoiceCreditNotePrintType, string customerNum, OptionStornoReason optionStornoReason, string relatedToInvoiceNum, DateTime relatedToInvoiceDateTime, decimal relatedToRcpNum, string fMNum, string relatedToURN)
        {
            Do("OpenCreditNoteWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "OptionInvoiceCreditNotePrintType", optionInvoiceCreditNotePrintType, "CustomerNum", customerNum, "OptionStornoReason", optionStornoReason, "RelatedToInvoiceNum", relatedToInvoiceNum, "RelatedToInvoiceDateTime", relatedToInvoiceDateTime, "RelatedToRcpNum", relatedToRcpNum, "FMNum", fMNum, "RelatedToURN", relatedToURN);
        }

        /// <summary>
        /// Prints an operator's report for a specified operator (0 = all operators) with or without zeroing ('Z' or 'X'). When a 'Z' value is specified the report should include all operators.
        /// </summary>
        /// <param name="optionZeroing">with following values: 
        ///  - 'Z' - Zeroing 
        ///  - 'X' - Without zeroing</param>
        /// <param name="number">Symbols from 0 to 20corresponding to operator's number 
        /// ,0 for all operators</param>
        public void PrintOperatorReport(OptionZeroing optionZeroing, decimal number)
        {
            Do("PrintOperatorReport", "OptionZeroing", optionZeroing, "Number", number);
        }

        /// <summary>
        /// Provides detailed 7-byte information about the current status of the fiscal printer.
        /// </summary>
        public StatusRes ReadStatus()
        {
            return CreateRes<StatusRes>(Do("ReadStatus"));
        }

        /// <summary>
        /// Opens a fiscal receipt assigned to the specified operator number and operator password, parameters for receipt format, print VAT, printing type and unique receipt number.
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's number</param>
        /// <param name="operPass">6 symbols for operator's password</param>
        /// <param name="optionReceiptFormat">1 symbol with value: 
        ///  - '1' - Detailed 
        ///  - '0' - Brief</param>
        /// <param name="optionPrintVAT">1 symbol with value:  
        ///  - '1' - Yes 
        ///  - '0' - No</param>
        /// <param name="optionFiscalRcpPrintType">1 symbol with value: 
        /// - '0' - Step by step printing 
        /// - '2' - Postponed printing 
        /// - '4' - Buffered printing</param>
        /// <param name="uniqueReceiptNumber">Up to 24 symbols for unique receipt number. 
        /// NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
        /// * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
        /// * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
        /// * YYYYYYY - 7 symbols [0-9] for next number of the receipt</param>
        public void OpenReceipt(decimal operNum, string operPass, OptionReceiptFormat optionReceiptFormat, OptionPrintVAT optionPrintVAT, OptionFiscalRcpPrintType optionFiscalRcpPrintType, string uniqueReceiptNumber)
        {
            Do("OpenReceipt", "OperNum", operNum, "OperPass", operPass, "OptionReceiptFormat", optionReceiptFormat, "OptionPrintVAT", optionPrintVAT, "OptionFiscalRcpPrintType", optionFiscalRcpPrintType, "UniqueReceiptNumber", uniqueReceiptNumber);
        }

        /// <summary>
        /// Read or Store Electronic Journal Report by number of Z report blocks, CSV format option and document content. If CSV format is set the content can includes only fiscal receipts. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
        /// </summary>
        /// <param name="optionStorageReport">1 character with value 
        ///  - 'j0' - To PC 
        ///  - 'j2' - To USB Flash Drive 
        ///  - 'j4' - To SD card</param>
        /// <param name="optionCSVformat">1 symbol with value: 
        ///  - 'C' - Yes 
        ///  - 'X' - No</param>
        /// <param name="flagsReceipts">1 symbol for Receipts included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=1 Yes, Flags.5=0 No (Include PO) 
        /// Flags.4=1 Yes, Flags.4=0 No (Include RA) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)</param>
        /// <param name="flagsReports">1 symbol for Reports included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=0 
        /// Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)</param>
        /// <param name="startZNum">4 symbols for initial number report in format ####</param>
        /// <param name="endZNum">4 symbols for final number report in format ####</param>
        public void ReadEJByZBlocksCustom(OptionStorageReport optionStorageReport, OptionCSVformat optionCSVformat, byte flagsReceipts, byte flagsReports, decimal startZNum, decimal endZNum)
        {
            Do("ReadEJByZBlocksCustom", "OptionStorageReport", optionStorageReport, "OptionCSVformat", optionCSVformat, "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartZNum", startZNum, "EndZNum", endZNum);
        }

        /// <summary>
        /// Sets the date and time and prints out the current values.
        /// </summary>
        /// <param name="dateTime">Date Time parameter in format: DD-MM-YY HH:MM</param>
        public void SetDateTime(DateTime dateTime)
        {
            Do("SetDateTime", "DateTime", dateTime);
        }

        /// <summary>
        /// Stores a block containing the number format into the fiscal memory. Print the current status on the printer.
        /// </summary>
        /// <param name="password">6-symbols string</param>
        /// <param name="optionDecimalPointPosition">1 symbol with values: 
        ///  - '0'- Whole numbers 
        ///  - '2' - Fractions</param>
        public void ProgDecimalPointPosition(string password, OptionDecimalPointPosition optionDecimalPointPosition)
        {
            Do("ProgDecimalPointPosition", "Password", password, "OptionDecimalPointPosition", optionDecimalPointPosition);
        }

        /// <summary>
        /// Provides information about electronic signature of last daily report.
        /// </summary>
        public string ReadLastDailySignature()
        {
            return CreateRes<string>(Do("ReadLastDailySignature"));
        }

        /// <summary>
        /// Provides the content of the header UIC prefix.
        /// </summary>
        public string ReadHeaderUICPrefix()
        {
            return CreateRes<string>(Do("ReadHeaderUICPrefix"));
        }

        /// <summary>
        /// Provides information about the price and price type of the specified article.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
        public PLUpriceRes ReadPLUprice(decimal pLUNum)
        {
            return CreateRes<PLUpriceRes>(Do("ReadPLUprice", "PLUNum", pLUNum));
        }

        /// <summary>
        /// Provides information about operator's name and password.
        /// </summary>
        /// <param name="number">Symbol from 1 to 20 corresponding to the number of 
        /// operators.</param>
        public OperatorNamePasswordRes ReadOperatorNamePassword(decimal number)
        {
            return CreateRes<OperatorNamePasswordRes>(Do("ReadOperatorNamePassword", "Number", number));
        }

        /// <summary>
        /// Read the last operator's report number and date and time.
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's 
        /// number</param>
        public DailyCountersByOperatorRes ReadDailyCountersByOperator(decimal operNum)
        {
            return CreateRes<DailyCountersByOperatorRes>(Do("ReadDailyCountersByOperator", "OperNum", operNum));
        }

        /// <summary>
        /// Provides information about all programmed types of payment, currency name and currency exchange rate.
        /// </summary>
        public PaymentsRes ReadPayments()
        {
            return CreateRes<PaymentsRes>(Do("ReadPayments"));
        }

        /// <summary>
        /// Register the sell (for correction use minus sign in the price field) of article with specified VAT. If department is present the relevant accumulations are perfomed in its registers.
        /// </summary>
        /// <param name="namePLU">36 symbols for article's name. 34 symbols are printed on paper. 
        /// Symbo 0x7C '|' is new line separator.</param>
        /// <param name="optionVATClass">1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden</param>
        /// <param name="price">Up to 10 symbols for article's price. Use minus sign '-' for correction</param>
        /// <param name="quantity">Up to 10 symbols for quantity</param>
        /// <param name="discAddP">Up to 7 symbols for percentage of discount/addition. 
        /// Use minus sign '-' for discount</param>
        /// <param name="discAddV">Up to 8 symbols for value of discount/addition. 
        /// Use minus sign '-' for discount</param>
        /// <param name="depNum">1 symbol for article department 
        /// attachment, formed in the following manner; example: Dep01 = 81h,  
        /// Dep02 = 82h … Dep19 = 93h</param>
        public void SellPLUwithSpecifiedVATfromDep(string namePLU, OptionVATClass optionVATClass, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV, int depNum)
        {
            Do("SellPLUwithSpecifiedVATfromDep", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
        }

        /// <summary>
        /// Preprogram the name of the payment type.
        /// </summary>
        /// <param name="optionPaymentNum">1 symbol for payment type  
        ///  - '9' - Payment 9 
        ///  - '10' - Payment 10 
        ///  - '11' - Payment 11</param>
        /// <param name="name">10 symbols for payment type name</param>
        /// <param name="rate">10 symbols for exchange rate in format: ####.#####  
        /// of the 11th payment type, maximal value 0420.00000</param>
        public void ProgPayment(OptionPaymentNum optionPaymentNum, string name, decimal? rate)
        {
            Do("ProgPayment", "OptionPaymentNum", optionPaymentNum, "Name", name, "Rate", rate);
        }

        /// <summary>
        /// Prints out a diagnostic receipt.
        /// </summary>
        public void PrintDiagnostics()
        {
            Do("PrintDiagnostics");
        }

        /// <summary>
        /// Provides additional status information
        /// </summary>
        public DetailedPrinterStatusRes ReadDetailedPrinterStatus()
        {
            return CreateRes<DetailedPrinterStatusRes>(Do("ReadDetailedPrinterStatus"));
        }

        /// <summary>
        /// Opens a fiscal invoice receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
        /// </summary>
        /// <param name="operNum">Symbol from 1 to 20 corresponding to operator's number</param>
        /// <param name="operPass">6 symbols for operator's password</param>
        /// <param name="optionInvoicePrintType">1 symbol with value: 
        /// - '1' - Step by step printing 
        /// - '3' - Postponed Printing 
        /// - '5' - Buffered Printing</param>
        /// <param name="recipient">26 symbols for Invoice recipient</param>
        /// <param name="buyer">16 symbols for Invoice buyer</param>
        /// <param name="vATNumber">13 symbols for customer Fiscal number</param>
        /// <param name="uIC">13 symbols for customer Unique Identification Code</param>
        /// <param name="address">30 symbols for Address</param>
        /// <param name="optionUICType">1 symbol for type of Unique Identification Code:  
        ///  - '0' - Bulstat 
        ///  - '1' - EGN 
        ///  - '2' - Foreigner Number 
        ///  - '3' - NRA Official Number</param>
        /// <param name="uniqueReceiptNumber">Up to 24 symbols for unique receipt number. 
        /// NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
        /// * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
        /// * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
        /// * YYYYYYY - 7 symbols [0-9] for next number of the receipt</param>
        public void OpenInvoiceWithFreeCustomerData(decimal operNum, string operPass, OptionInvoicePrintType optionInvoicePrintType, string recipient, string buyer, string vATNumber, string uIC, string address, OptionUICType optionUICType, string uniqueReceiptNumber)
        {
            Do("OpenInvoiceWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "OptionInvoicePrintType", optionInvoicePrintType, "Recipient", recipient, "Buyer", buyer, "VATNumber", vATNumber, "UIC", uIC, "Address", address, "OptionUICType", optionUICType, "UniqueReceiptNumber", uniqueReceiptNumber);
        }

        /// <summary>
        /// Program the contents of a footer lines.
        /// </summary>
        /// <param name="footerText">TextLength symbols for footer line</param>
        public void ProgFooter(string footerText)
        {
            Do("ProgFooter", "FooterText", footerText);
        }

        /// <summary>
        /// Print a copy of the last receipt issued. When FD parameter for duplicates is enabled.
        /// </summary>
        public void PrintLastReceiptDuplicate()
        {
            Do("PrintLastReceiptDuplicate");
        }

        /// <summary>
        /// Stores a block containing the values of the VAT rates into the fiscal memory. Print the values on the printer.
        /// </summary>
        /// <param name="password">6-symbols string</param>
        /// <param name="vATrate0">Value of VAT rate А from 6 symbols in format ##.##</param>
        /// <param name="vATrate1">Value of VAT rate Б from 6 symbols in format ##.##</param>
        /// <param name="vATrate2">Value of VAT rate В from 6 symbols in format ##.##</param>
        /// <param name="vATrate3">Value of VAT rate Г from 6 symbols in format ##.##</param>
        /// <param name="vATrate4">Value of VAT rate Д from 6 symbols in format ##.##</param>
        /// <param name="vATrate5">Value of VAT rate Е from 6 symbols in format ##.##</param>
        /// <param name="vATrate6">Value of VAT rate Ж from 6 symbols in format ##.##</param>
        /// <param name="vATrate7">Value of VAT rate З from 6 symbols in format ##.##</param>
        public void ProgVATrates(string password, decimal vATrate0, decimal vATrate1, decimal vATrate2, decimal vATrate3, decimal vATrate4, decimal vATrate5, decimal vATrate6, decimal vATrate7)
        {
            Do("ProgVATrates", "Password", password, "VATrate0", vATrate0, "VATrate1", vATrate1, "VATrate2", vATrate2, "VATrate3", vATrate3, "VATrate4", vATrate4, "VATrate5", vATrate5, "VATrate6", vATrate6, "VATrate7", vATrate7);
        }

        /// <summary>
        /// Read or Store Electronic Journal Report by initial to end date, CSV format option and document content. If CSV format is set the content can includes only fiscal receipts. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
        /// </summary>
        /// <param name="optionStorageReport">1 character with value 
        ///  - 'j0' - To PC 
        ///  - 'j2' - To USB Flash Drive 
        ///  - 'j4' - To SD card</param>
        /// <param name="optionCSVformat">1 symbol with value: 
        ///  - 'C' - Yes 
        ///  - 'X' - No</param>
        /// <param name="flagsReceipts">1 symbol for Receipts included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=1 Yes, Flags.5=0 No (Include PO) 
        /// Flags.4=1 Yes, Flags.4=0 No (Include RA) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)</param>
        /// <param name="flagsReports">1 symbol for Reports included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=0 
        /// Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)</param>
        /// <param name="startRepFromDate">6 symbols for initial date in the DDMMYY format</param>
        /// <param name="endRepFromDate">6 symbols for final date in the DDMMYY format</param>
        public void ReadEJByDateCustom(OptionStorageReport optionStorageReport, OptionCSVformat optionCSVformat, byte flagsReceipts, byte flagsReports, DateTime startRepFromDate, DateTime endRepFromDate)
        {
            Do("ReadEJByDateCustom", "OptionStorageReport", optionStorageReport, "OptionCSVformat", optionCSVformat, "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
        }

        /// <summary>
        /// Print a brief FM report by initial and end FM report number.
        /// </summary>
        /// <param name="startZNum">4 symbols for the initial FM report number included in report, format ####</param>
        /// <param name="endZNum">4 symbols for the final FM report number included in report, format ####</param>
        public void PrintBriefFMReportByZBlocks(decimal startZNum, decimal endZNum)
        {
            Do("PrintBriefFMReportByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
        }

        /// <summary>
        /// Define Fiscal device type. The command is allowed only in non- fiscal mode, before fiscalization and after deregistration before the next fiscalization. The type of device can be read by Version command 0x21.
        /// </summary>
        /// <param name="optionFDType">1 symbol for fiscal device type with value: 
        ///  - '0' - FPr for Fuel type 3 
        ///  - '1' - Main FPr for Fuel system type 31 
        ///  - '2' - ECR for online store type 11 
        ///  - '3' - FPr for online store type 21  
        ///  - '*' - reset default type</param>
        /// <param name="password">3-symbols string</param>
        public void SetFiscalDeviceType(OptionFDType optionFDType, string password)
        {
            Do("SetFiscalDeviceType", "OptionFDType", optionFDType, "Password", password);
        }

        /// <summary>
        /// Read Electronic Journal Report by initial to end date.
        /// </summary>
        /// <param name="optionReportFormat">1 character with value 
        ///  - 'J0' - Detailed EJ 
        ///  - 'J8' - Brief EJ</param>
        /// <param name="startRepFromDate">6 symbols for initial date in the DDMMYY format</param>
        /// <param name="endRepFromDate">6 symbols for final date in the DDMMYY format</param>
        public void ReadEJByDate(OptionReportFormat optionReportFormat, DateTime startRepFromDate, DateTime endRepFromDate)
        {
            Do("ReadEJByDate", "OptionReportFormat", optionReportFormat, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
        }

        /// <summary>
        /// Provides information about the barcode of the specified article.
        /// </summary>
        /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
        public PLUbarcodeRes ReadPLUbarcode(decimal pLUNum)
        {
            return CreateRes<PLUbarcodeRes>(Do("ReadPLUbarcode", "PLUNum", pLUNum));
        }

        /// <summary>
        /// Set data for the state department number from the internal FD database. Parameters Price, OptionDepPrice and AdditionalName are not obligatory and require the previous not obligatory parameter.
        /// </summary>
        /// <param name="number">2 symbols department number in format ##</param>
        /// <param name="name">20 characters department name</param>
        /// <param name="optionVATClass">1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden</param>
        /// <param name="price">Up to 10 symbols for department price</param>
        /// <param name="optionDepPrice">1 symbol for Department price flags with next value:  
        /// - '0' - Free price disabled  
        /// - '1' - Free price enabled  
        /// - '2' - Limited price  
        /// - '4' - Free price disabled for single transaction  
        /// - '5' - Free price enabled for single transaction  
        /// - '6' - Limited price for single transaction</param>
        /// <param name="additionalName">14 characters additional department name</param>
        public void ProgDepartment(decimal number, string name, OptionVATClass optionVATClass, decimal? price, OptionDepPrice? optionDepPrice, string additionalName)
        {
            Do("ProgDepartment", "Number", number, "Name", name, "OptionVATClass", optionVATClass, "Price", price, "OptionDepPrice", optionDepPrice, "AdditionalName", additionalName);
        }

        /// <summary>
        /// Prints the programmed graphical logo with the stated number.
        /// </summary>
        /// <param name="number">Number of logo to be printed. If missing, prints logo with number 0</param>
        public void PrintLogo(decimal number)
        {
            Do("PrintLogo", "Number", number);
        }

        /// <summary>
        /// Read the total number of customers, discounts, additions, corrections and accumulated amounts by specified operator.
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's number</param>
        public DailyGeneralRegistersByOperatorRes ReadDailyGeneralRegistersByOperator(decimal operNum)
        {
            return CreateRes<DailyGeneralRegistersByOperatorRes>(Do("ReadDailyGeneralRegistersByOperator", "OperNum", operNum));
        }

        /// <summary>
        /// Print a detailed FM report by initial and end FM report number.
        /// </summary>
        /// <param name="startZNum">4 symbols for the initial report number included in report, format ####</param>
        /// <param name="endZNum">4 symbols for the final report number included in report, format ####</param>
        public void PrintDetailedFMReportByZBlocks(decimal startZNum, decimal endZNum)
        {
            Do("PrintDetailedFMReportByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
        }

        /// <summary>
        /// Print Customer X or Z report
        /// </summary>
        /// <param name="optionZeroing">with following values: 
        ///  - 'Z' -Zeroing 
        ///  - 'X' - Without zeroing</param>
        public void PrintCustomerReport(OptionZeroing optionZeroing)
        {
            Do("PrintCustomerReport", "OptionZeroing", optionZeroing);
        }

        /// <summary>
        /// Depending on the parameter prints:  − daily fiscal report with zeroing and fiscal memory record, preceded by Electronic Journal report print ('Z'); − daily fiscal report without zeroing ('X');
        /// </summary>
        /// <param name="optionZeroing">1 character with following values: 
        ///  - 'Z' - Zeroing 
        ///  - 'X' - Without zeroing</param>
        public void PrintDailyReport(OptionZeroing optionZeroing)
        {
            Do("PrintDailyReport", "OptionZeroing", optionZeroing);
        }

        /// <summary>
        /// Provides the content of the footer line.
        /// </summary>
        public string ReadFooter()
        {
            return CreateRes<string>(Do("ReadFooter"));
        }

        /// <summary>
        /// Opens a non-fiscal receipt assigned to the specified operator number, operator password and print type.
        /// </summary>
        /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's 
        /// number</param>
        /// <param name="operPass">6 symbols for operator's password</param>
        /// <param name="optionNonFiscalPrintType">1 symbol with value: 
        /// - '0' - Step by step printing 
        /// - '1' - Postponed Printing</param>
        public void OpenNonFiscalReceipt(decimal operNum, string operPass, OptionNonFiscalPrintType? optionNonFiscalPrintType)
        {
            Do("OpenNonFiscalReceipt", "OperNum", operNum, "OperPass", operPass, "OptionNonFiscalPrintType", optionNonFiscalPrintType);
        }

        /// <summary>
        /// Calculate the subtotal amount with printing and display visualization options. Provide information about values of the calculated amounts. If a percent or value discount/addition has been specified the subtotal and the discount/addition value will be printed regardless the parameter for printing.
        /// </summary>
        /// <param name="optionPrinting">1 symbol with value: 
        ///  - '1' - Yes 
        ///  - '0' - No</param>
        /// <param name="optionDisplay">1 symbol with value: 
        ///  - '1' - Yes 
        ///  - '0' - No</param>
        /// <param name="discAddV">Up to 8 symbols for the value of the 
        /// discount/addition. Use minus sign '-' for discount</param>
        /// <param name="discAddP">Up to 7 symbols for the percentage value of the 
        /// discount/addition. Use minus sign '-' for discount</param>
        public decimal Subtotal(OptionPrinting optionPrinting, OptionDisplay optionDisplay, decimal? discAddV, decimal? discAddP)
        {
            return CreateRes<decimal>(Do("Subtotal", "OptionPrinting", optionPrinting, "OptionDisplay", optionDisplay, "DiscAddV", discAddV, "DiscAddP", discAddP));
        }

        /// <summary>
        /// Print a detailed FM payments report by initial and end date.
        /// </summary>
        /// <param name="startDate">6 symbols for initial date in the DDMMYY format</param>
        /// <param name="endDate">6 symbols for final date in the DDMMYY format</param>
        public void PrintDetailedFMPaymentsReportByDate(DateTime startDate, DateTime endDate)
        {
            Do("PrintDetailedFMPaymentsReportByDate", "StartDate", startDate, "EndDate", endDate);
        }

        /// <summary>
        /// Provides information about the RA amounts by type of payment and the total number of operations.
        /// </summary>
        public DailyRARes ReadDailyRA()
        {
            return CreateRes<DailyRARes>(Do("ReadDailyRA"));
        }

        /// <summary>
        /// Provides information about the number of customers (number of fiscal receipt issued), number of discounts, additions and corrections made and the accumulated amounts.
        /// </summary>
        public GeneralDailyRegistersRes ReadGeneralDailyRegisters()
        {
            return CreateRes<GeneralDailyRegistersRes>(Do("ReadGeneralDailyRegisters"));
        }

        /// <summary>
        /// Provides the content of the Display Greeting message.
        /// </summary>
        public string ReadDisplayGreetingMessage()
        {
            return CreateRes<string>(Do("ReadDisplayGreetingMessage"));
        }

        /// <summary>
        /// Prints a brief payments from the FM.
        /// </summary>
        public void PrintBriefFMPaymentsReport()
        {
            Do("PrintBriefFMPaymentsReport");
        }

        /// <summary>
        /// Read the Grand fiscal turnover sum and Grand fiscal VAT sum.
        /// </summary>
        public GrandFiscalSalesAndStornoAmountsRes ReadGrandFiscalSalesAndStornoAmounts()
        {
            return CreateRes<GrandFiscalSalesAndStornoAmountsRes>(Do("ReadGrandFiscalSalesAndStornoAmounts"));
        }

        /// <summary>
        /// Register the sell (for correction use minus sign in the price field) of article belonging to department with specified name, price, fractional quantity and/or discount/addition on the transaction. The VAT of article got from department to which article belongs.
        /// </summary>
        /// <param name="namePLU">36 symbols for article's name. 34 symbols are printed on paper. 
        /// Symbo 0x7C '|' is new line separator.</param>
        /// <param name="price">Up to 10 symbols for article's price. Use minus sign '-' for correction</param>
        /// <param name="quantity">From 3 to 10 symbols for quantity in format fractional format, e.g. 1/3</param>
        /// <param name="discAddP">1 to 7 symbols for percentage of discount/addition. Use 
        /// minus sign '-' for discount</param>
        /// <param name="discAddV">1 to 8 symbols for value of discount/addition. Use 
        /// minus sign '-' for discount</param>
        /// <param name="depNum">1 symbol for article department 
        /// attachment, formed in the following manner; example: Dep01 = 81h, Dep02 
        /// = 82h … Dep19 = 93h</param>
        public void SellFractQtyPLUfromDep(string namePLU, decimal price, string quantity, decimal? discAddP, decimal? discAddV, int depNum)
        {
            Do("SellFractQtyPLUfromDep", "NamePLU", namePLU, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
        }

        /// <summary>
        /// Provides information about the number of POS, printing of logo, cash drawer opening, cutting permission, display mode, article report type, Enable/Disable currency in receipt, EJ font type and working operators counter.
        /// </summary>
        public ParametersRes ReadParameters()
        {
            return CreateRes<ParametersRes>(Do("ReadParameters"));
        }

        /// <summary>
        /// Provides information about the device type, Certificate number, Certificate date and time and Device model.
        /// </summary>
        public VersionRes ReadVersion()
        {
            return CreateRes<VersionRes>(Do("ReadVersion"));
        }

        /// <summary>
        ///  Writes raw bytes to FP 
        /// </summary>
        /// <param name="bytes">The bytes in BASE64 ecoded string to be written to FP</param>
        public void RawWrite(byte[] bytes)
        {
            Do("RawWrite", "Bytes", bytes);
        }

        /// <summary>
        /// Register the sell (for correction use minus sign in the price field) of article  with specified department. If VAT is present the relevant accumulations are perfomed in its  registers.
        /// </summary>
        /// <param name="namePLU">36 symbols for name of sale. 34 symbols are printed on 
        /// paper. Symbo 0x7C '|' is new line separator.</param>
        /// <param name="depNum">1 symbol for article department 
        /// attachment, formed in the following manner: DepNum[HEX] + 80h 
        /// example: Dep01 = 81h, Dep02 = 82h … Dep19 = 93h</param>
        /// <param name="price">Up to 10 symbols for article's price. Use minus sign '-' for correction</param>
        /// <param name="quantity">Up to 10 symbols for article's quantity sold</param>
        /// <param name="discAddP">Up to 7 for percentage of discount/addition. Use 
        /// minus sign '-' for discount</param>
        /// <param name="discAddV">Up to 8 symbols for percentage of 
        /// discount/addition. Use minus sign '-' for discount</param>
        /// <param name="optionVATClass">1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden</param>
        public void SellPLUwithSpecifiedVATfromDep_(string namePLU, int depNum, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV, OptionVATClass? optionVATClass)
        {
            Do("SellPLUwithSpecifiedVATfromDep_", "NamePLU", namePLU, "DepNum", depNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "OptionVATClass", optionVATClass);
        }

        /// <summary>
        /// Print or store Electronic Journal Report from receipt number to receipt number.
        /// </summary>
        /// <param name="optionReportStorage">1 character with value: 
        ///  - 'J1' - Printing 
        ///  - 'J2' - USB storage 
        ///  - 'J4' - SD card storage</param>
        /// <param name="startRcpNum">6 symbols for initial receipt number included in report, in format ######.</param>
        /// <param name="endRcpNum">6 symbols for final receipt number included in report in format ######.</param>
        public void PrintOrStoreEJByRcpNum(OptionReportStorage optionReportStorage, decimal startRcpNum, decimal endRcpNum)
        {
            Do("PrintOrStoreEJByRcpNum", "OptionReportStorage", optionReportStorage, "StartRcpNum", startRcpNum, "EndRcpNum", endRcpNum);
        }

        /// <summary>
        /// Read the amounts returned as change by different payment types for the specified operator.
        /// </summary>
        /// <param name="operNum">Symbol from 1 to 20 corresponding to operator's 
        /// number</param>
        public DailyReturnedChangeAmountsByOperatorRes ReadDailyReturnedChangeAmountsByOperator(decimal operNum)
        {
            return CreateRes<DailyReturnedChangeAmountsByOperatorRes>(Do("ReadDailyReturnedChangeAmountsByOperator", "OperNum", operNum));
        }

        /// <summary>
        /// Read or Store Electronic Journal Report from receipt number to receipt number, CSV format option and document content. If CSV format is set the content can includes only fiscal receipts. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
        /// </summary>
        /// <param name="optionStorageReport">1 character with value 
        ///  - 'j0' - To PC 
        ///  - 'j2' - To USB Flash Drive 
        ///  - 'j4' - To SD card</param>
        /// <param name="optionCSVformat">1 symbol with value: 
        ///  - 'C' - Yes 
        ///  - 'X' - No</param>
        /// <param name="flagsReceipts">1 symbol for Receipts included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=1 Yes, Flags.5=0 No (Include PO) 
        /// Flags.4=1 Yes, Flags.4=0 No (Include RA) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)</param>
        /// <param name="flagsReports">1 symbol for Reports included in EJ: 
        /// Flags.7=0 
        /// Flags.6=1 
        /// Flags.5=0 
        /// Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
        /// Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
        /// Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
        /// Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
        /// Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)</param>
        /// <param name="startRcpNum">6 symbols for initial receipt number included in report in format ######.</param>
        /// <param name="endRcpNum">6 symbols for final receipt number included in report in format ######.</param>
        public void ReadEJByReceiptNumCustom(OptionStorageReport optionStorageReport, OptionCSVformat optionCSVformat, byte flagsReceipts, byte flagsReports, decimal startRcpNum, decimal endRcpNum)
        {
            Do("ReadEJByReceiptNumCustom", "OptionStorageReport", optionStorageReport, "OptionCSVformat", optionCSVformat, "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartRcpNum", startRcpNum, "EndRcpNum", endRcpNum);
        }

        /// <summary>
        /// Paying the exact amount in cash and close the fiscal receipt.
        /// </summary>
        public void CashPayCloseReceipt()
        {
            Do("CashPayCloseReceipt");
        }

        /// <summary>
        /// Program the contents of a Display Greeting message.
        /// </summary>
        /// <param name="displayGreetingText">20 symbols for Display greeting message</param>
        public void ProgDisplayGreetingMessage(string displayGreetingText)
        {
            Do("ProgDisplayGreetingMessage", "DisplayGreetingText", displayGreetingText);
        }

        /// <summary>
        /// Provides information about the PO amounts by type of payment and the total number of operations.
        /// </summary>
        public DailyPORes ReadDailyPO()
        {
            return CreateRes<DailyPORes>(Do("ReadDailyPO"));
        }

        /// <summary>
        /// Prints an extended daily financial report (an article report followed by a daily financial report) with or without zeroing ('Z' or 'X').
        /// </summary>
        /// <param name="optionZeroing">with following values: 
        ///  - 'Z' -Zeroing 
        ///  - 'X' - Without zeroing</param>
        public void PrintDetailedDailyReport(OptionZeroing optionZeroing)
        {
            Do("PrintDetailedDailyReport", "OptionZeroing", optionZeroing);
        }

    }

    public enum OptionZeroing
    {
        Without_zeroing = 'X',
        Zeroing = 'Z'
    }

    public enum DecimalPoint
    {
        Fractions = '2',
        Whole_numbers = '0'
    }

    public enum OptionPrintLogo
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionAutoOpenDrawer
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionAutoCut
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionExternalDispManagement
    {
        Auto = '0',
        Manuel = '1'
    }

    public enum OptionArticleReportType
    {
        Brief = '0',
        Detailed = '1'
    }

    public enum OptionEnableCurrency
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionEJFontType
    {
        Low_Font = '1',
        Normal_Font = '0'
    }

    public enum OptionWorkOperatorCount
    {
        More = '0',
        One = '1'
    }

    public enum OptionVATClass
    {
        Forbidden = '*',
        VAT_Class_0 = 'А',
        VAT_Class_1 = 'Б',
        VAT_Class_2 = 'В',
        VAT_Class_3 = 'Г',
        VAT_Class_4 = 'Д',
        VAT_Class_5 = 'Е',
        VAT_Class_6 = 'Ж',
        VAT_Class_7 = 'З'
    }

    public enum OptionUICType
    {
        Bulstat = '0',
        EGN = '1',
        Foreigner_Number = '2',
        NRA_Official_Number = '3'
    }

    public enum OptionReportFormat
    {
        /// <summary>
        /// J8 - 14410
        /// </summary>
        Brief_EJ = 14410,
        /// <summary>
        /// J0 - 12362
        /// </summary>
        Detailed_EJ = 12362
    }

    public enum OptionPrice
    {
        Free_price_is_disable_valid_only_programmed_price = '0',
        Free_price_is_enable = '1',
        Limited_price = '2'
    }

    public enum OptionSingleTransaction
    {
        Active_Single_transaction_in_receipt = '1',
        Inactive_default_value = '0'
    }

    public enum OptionType
    {
        Defined_from_the_device = '2',
        Over_subtotal = '1',
        Over_transaction_sum = '0'
    }

    public enum OptionSubtotal
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionReportStorage
    {
        /// <summary>
        /// J1 - 12618
        /// </summary>
        Printing = 12618,
        /// <summary>
        /// J4 - 13386
        /// </summary>
        SD_card_storage = 13386,
        /// <summary>
        /// J2 - 12874
        /// </summary>
        USB_storage = 12874
    }

    public enum OptionSign
    {
        Correction = '-',
        Sale = '+'
    }

    public enum OptionPaymentType
    {
        Payment_0 = '0',
        Payment_1 = '1',
        /// <summary>
        /// 10 - 12337
        /// </summary>
        Payment_10 = 12337,
        /// <summary>
        /// 11 - 12593
        /// </summary>
        Payment_11 = 12593,
        Payment_2 = '2',
        Payment_3 = '3',
        Payment_4 = '4',
        Payment_5 = '5',
        Payment_6 = '6',
        Payment_7 = '7',
        Payment_8 = '8',
        Payment_9 = '9'
    }

    public enum OptionReceiptFormat
    {
        Brief = '0',
        Detailed = '1'
    }

    public enum OptionPrintVAT
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionStornoRcpPrintType
    {
        Buffered_Printing = 'D',
        Postponed_Printing = 'B',
        Step_by_step_printing = '@'
    }

    public enum OptionStornoReason
    {
        Goods_Claim_or_Goods_return = '1',
        Operator_error = '0',
        Tax_relief = '2'
    }

    public enum OptionQuantityType
    {
        Availability_of_PLU_stock_is_not_monitored = '0',
        Disable_negative_quantity = '1',
        Enable_negative_quantity = '2'
    }

    public enum OptionIsReceiptOpened
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionDepPrice
    {
        Free_price_disabled = '0',
        Free_price_disabled_for_single_transaction = '4',
        Free_price_enabled = '1',
        Free_price_enabled_for_single_transaction = '5',
        Limited_price = '2',
        Limited_price_for_single_transaction = '6'
    }

    public enum OptionHeaderLine
    {
        Header_1 = '1',
        Header_2 = '2',
        Header_3 = '3',
        Header_4 = '4',
        Header_5 = '5',
        Header_6 = '6',
        Header_7 = '7'
    }

    public enum OptionInvoiceCreditNotePrintType
    {
        Buffered_Printing = 'E',
        Postponed_Printing = 'C',
        Step_by_step_printing = 'A'
    }

    public enum OptionCodeType
    {
        CODABAR = '6',
        CODE_128 = 'I',
        CODE_39 = '4',
        CODE_93 = 'H',
        EAN_13 = '2',
        EAN_8 = '3',
        ITF = '5',
        UPC_A = '0',
        UPC_E = '1'
    }

    public enum OptionStorageReport
    {
        /// <summary>
        /// j0 - 12394
        /// </summary>
        To_PC = 12394,
        /// <summary>
        /// j4 - 13418
        /// </summary>
        To_SD_card = 13418,
        /// <summary>
        /// j2 - 12906
        /// </summary>
        To_USB_Flash_Drive = 12906
    }

    public enum OptionCSVformat
    {
        No = 'X',
        Yes = 'C'
    }

    public enum OptionForbiddenVoid
    {
        allowed = '0',
        forbidden = '1'
    }

    public enum OptionVATinReceipt
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionInitiatedPayment
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionFinalizedPayment
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionPowerDownInReceipt
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionTypeReceipt
    {
        Invoice_Credit_note_receipt_Postponed_Printing = '7',
        Invoice_Credit_note_receipt_printing_step_by_step = '5',
        Invoice_sales_receipt_Postponed_Printing = '3',
        Invoice_sales_receipt_printing_step_by_step = '1',
        Sales_receipt_Postponed_Printing = '2',
        Sales_receipt_printing_step_by_step = '0',
        Storno_receipt_Postponed_Printing = '6',
        Storno_receipt_printing_step_by_step = '4'
    }

    public enum OptionChangeType
    {
        Change_In_Cash = '0',
        Change_In_Currency = '2',
        Same_As_The_payment = '1'
    }

    public enum OptionInvoicePrintType
    {
        Buffered_Printing = '5',
        Postponed_Printing = '3',
        Step_by_step_printing = '1'
    }

    public enum OptionChange
    {
        With_Change = '0',
        Without_Change = '1'
    }

    public enum OptionFiscalRcpPrintType
    {
        Buffered_printing = '4',
        Postponed_printing = '2',
        Step_by_step_printing = '0'
    }

    public enum OptionDecimalPointPosition
    {
        Fractions = '2',
        Whole_numbers = '0'
    }

    public enum OptionPaymentNum
    {
        /// <summary>
        /// 10 - 12337
        /// </summary>
        Payment_10 = 12337,
        /// <summary>
        /// 11 - 12593
        /// </summary>
        Payment_11 = 12593,
        Payment_9 = '9'
    }

    public enum OptionExternalDisplay
    {
        No = 'N',
        Yes = 'Y'
    }

    public enum OptionFDType
    {
        ECR_for_online_store_type_11 = '2',
        FPr_for_Fuel_type_3 = '0',
        FPr_for_online_store_type_21 = '3',
        Main_FPr_for_Fuel_system_type_31 = '1',
        reset_default_type = '*'
    }

    public enum OptionNonFiscalPrintType
    {
        Postponed_Printing = '1',
        Step_by_step_printing = '0'
    }

    public enum OptionPrinting
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionDisplay
    {
        No = '0',
        Yes = '1'
    }

    public enum OptionDeviceType
    {
        ECR = '1',
        /// <summary>
        /// 11 - 12593
        /// </summary>
        ECR_for_online_store = 12593,
        for_FUVAS_device = '5',
        FPr = '2',
        /// <summary>
        /// 21 - 12594
        /// </summary>
        FPr_for_online_store = 12594,
        Fuel = '3',
        /// <summary>
        /// 31 - 12595
        /// </summary>
        Fuel_system = 12595
    }

    public class DailyAvailableAmountsRes
    {
        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 0
        /// </summary>
        public decimal AmountPayment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 1
        /// </summary>
        public decimal AmountPayment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 2
        /// </summary>
        public decimal AmountPayment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 3
        /// </summary>
        public decimal AmountPayment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 4
        /// </summary>
        public decimal AmountPayment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 5
        /// </summary>
        public decimal AmountPayment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 6
        /// </summary>
        public decimal AmountPayment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 7
        /// </summary>
        public decimal AmountPayment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 8
        /// </summary>
        public decimal AmountPayment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 9
        /// </summary>
        public decimal AmountPayment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 10
        /// </summary>
        public decimal AmountPayment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 11
        /// </summary>
        public decimal AmountPayment11 { get; set; }
    }

    public class SentRcpInfoStatusRes
    {
        /// <summary>
        ///Up to 6 symbols for the last sent receipt number to NRA server
        /// </summary>
        public string LastSentRcpNum { get; set; }

        /// <summary>
        ///16 symbols for the date and time of the last sent receipt to NRA 
        /// server in format DD-MM-YYYY HH;MM
        /// </summary>
        public DateTime LastSentRcpDateTime { get; set; }

        /// <summary>
        ///Up to 6 symbols for the first unsent receipt number to NRA server
        /// </summary>
        public string FirstUnsentRcpNum { get; set; }

        /// <summary>
        ///16 symbols for the date and time of the first unsent receipt to
        /// </summary>
        public DateTime FirstUnsentRcpDateTime { get; set; }

        /// <summary>
        ///Up to 100 symbols for error message from NRA server, if exist
        /// </summary>
        public string NRA_ErrorMessage { get; set; }
    }

    public class DepartmentRes
    {
        /// <summary>
        ///2 symbols for department number in format: ##
        /// </summary>
        public decimal DepNum { get; set; }

        /// <summary>
        ///20 symbols for department name
        /// </summary>
        public string DepName { get; set; }

        /// <summary>
        ///1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden
        /// </summary>
        public OptionVATClass OptionVATClass { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated turnover of the article
        /// </summary>
        public decimal Turnover { get; set; }

        /// <summary>
        ///Up to 13 symbols for sold quantity of the department
        /// </summary>
        public decimal SoldQuantity { get; set; }

        /// <summary>
        ///Up to 5 symbols for the number of last Z Report
        /// </summary>
        public decimal LastZReportNumber { get; set; }

        /// <summary>
        ///16 symbols for date and hour on last Z Report in format  
        /// "DD-MM-YYYY HH:MM"
        /// </summary>
        public DateTime LastZReportDate { get; set; }
    }

    public class PLU_OldRes
    {
        /// <summary>
        ///5 symbols for article number format #####
        /// </summary>
        public decimal PLUNum { get; set; }

        /// <summary>
        ///20 symbols for article name
        /// </summary>
        public string PLUName { get; set; }

        /// <summary>
        ///Up to 11 symbols for article price
        /// </summary>
        public decimal Price { get; set; }

        /// <summary>
        ///1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden
        /// </summary>
        public OptionVATClass OptionVATClass { get; set; }

        /// <summary>
        ///Up to 13 symbols for turnover by this article
        /// </summary>
        public decimal Turnover { get; set; }

        /// <summary>
        ///Up to 13 symbols for sold quantity
        /// </summary>
        public decimal QuantitySold { get; set; }

        /// <summary>
        ///Up to 5 symbols for the number of last Z Report
        /// </summary>
        public decimal LastZReportNumber { get; set; }

        /// <summary>
        ///16 symbols for date and hour on last Z Report in format 
        ///  DD-MM-YYYY HH:MM
        /// </summary>
        public DateTime LastZReportDate { get; set; }

        /// <summary>
        ///BelongToDepNumber + 80h, 1 symbol for article department 
        /// attachment, formed in the following manner: 
        /// BelongToDepNumber[HEX] + 80h example: Dep01 = 81h, Dep02 
        /// = 82h … Dep19 = 93h
        /// </summary>
        public int BelongToDepNumber { get; set; }
    }

    public class InvoiceRangeRes
    {
        /// <summary>
        ///10 symbols for start No with leading zeroes in format ##########
        /// </summary>
        public decimal StartNum { get; set; }

        /// <summary>
        ///10 symbols for end No with leading zeroes in format ##########
        /// </summary>
        public decimal EndNum { get; set; }
    }

    public class PLUqtyRes
    {
        /// <summary>
        ///5 symbols for article number with leading zeroes in format #####
        /// </summary>
        public decimal PLUNum { get; set; }

        /// <summary>
        ///Up to13 symbols for quantity in stock
        /// </summary>
        public decimal AvailableQuantity { get; set; }

        /// <summary>
        ///1 symbol for Quantity flag with next value:  
        /// - '0'- Availability of PLU stock is not monitored  
        /// - '1'- Disable negative quantity  
        /// - '2'- Enable negative quantity
        /// </summary>
        public OptionQuantityType OptionQuantityType { get; set; }
    }

    public class SerialAndFiscalNumsRes
    {
        /// <summary>
        ///8 symbols for individual number of the fiscal device
        /// </summary>
        public string SerialNumber { get; set; }

        /// <summary>
        ///8 symbols for individual number of the fiscal memory
        /// </summary>
        public string FMNumber { get; set; }
    }

    public class CurrentOrLastReceiptPaymentAmountsRes
    {
        /// <summary>
        ///1 symbol with value: 
        ///  - '0' - No 
        ///  - '1' - Yes
        /// </summary>
        public OptionIsReceiptOpened OptionIsReceiptOpened { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 0 payment amount
        /// </summary>
        public decimal Payment0Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 1 payment amount
        /// </summary>
        public decimal Payment1Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 2 payment amount
        /// </summary>
        public decimal Payment2Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 3 payment amount
        /// </summary>
        public decimal Payment3Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 4 payment amount
        /// </summary>
        public decimal Payment4Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 5 payment amount
        /// </summary>
        public decimal Payment5Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 6 payment amount
        /// </summary>
        public decimal Payment6Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 7 payment amount
        /// </summary>
        public decimal Payment7Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 8 payment amount
        /// </summary>
        public decimal Payment8Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 9 payment amount
        /// </summary>
        public decimal Payment9Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 10 payment amount
        /// </summary>
        public decimal Payment10Amount { get; set; }

        /// <summary>
        ///Up to 13 symbols for type 11 payment amount
        /// </summary>
        public decimal Payment11Amount { get; set; }
    }

    public class DailyReturnedChangeAmountsRes
    {
        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 0
        /// </summary>
        public decimal AmountPayment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 1
        /// </summary>
        public decimal AmountPayment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 2
        /// </summary>
        public decimal AmountPayment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 3
        /// </summary>
        public decimal AmountPayment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 4
        /// </summary>
        public decimal AmountPayment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 5
        /// </summary>
        public decimal AmountPayment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 6
        /// </summary>
        public decimal AmountPayment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 7
        /// </summary>
        public decimal AmountPayment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 8
        /// </summary>
        public decimal AmountPayment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 9
        /// </summary>
        public decimal AmountPayment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 10
        /// </summary>
        public decimal AmountPayment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 11
        /// </summary>
        public decimal AmountPayment11 { get; set; }
    }

    public class DepartmentAllRes
    {
        /// <summary>
        ///2 symbols for department number in format: ##
        /// </summary>
        public decimal DepNum { get; set; }

        /// <summary>
        ///20 symbols for department name
        /// </summary>
        public string DepName { get; set; }

        /// <summary>
        ///1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden
        /// </summary>
        public OptionVATClass OptionVATClass { get; set; }

        /// <summary>
        ///Up to 10 symbols for department price
        /// </summary>
        public decimal Price { get; set; }

        /// <summary>
        ///1 symbol for Department flags with next value:  
        /// - '0' - Free price disabled  
        /// - '1' - Free price enabled  
        /// - '2' - Limited price  
        /// - '4' - Free price disabled for single transaction  
        /// - '5' - Free price enabled for single transaction  
        /// - '6' - Limited price for single transaction
        /// </summary>
        public OptionDepPrice OptionDepPrice { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated turnover of the article
        /// </summary>
        public decimal TurnoverAmount { get; set; }

        /// <summary>
        ///Up to 13 symbols for sold quantity of the department
        /// </summary>
        public decimal SoldQuantity { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated storno amount
        /// </summary>
        public decimal StornoAmount { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated storno quantiy
        /// </summary>
        public decimal StornoQuantity { get; set; }

        /// <summary>
        ///Up to 5 symbols for the number of last Z Report
        /// </summary>
        public decimal LastZReportNumber { get; set; }

        /// <summary>
        ///16 symbols for date and hour on last Z Report in format  
        /// "DD-MM-YYYY HH:MM"
        /// </summary>
        public DateTime LastZReportDate { get; set; }
    }

    public class VATratesRes
    {
        /// <summary>
        ///Value of VAT rate А from 7 symbols in format ##.##%
        /// </summary>
        public decimal VATrate0 { get; set; }

        /// <summary>
        ///Value of VAT rate Б from 7 symbols in format ##.##%
        /// </summary>
        public decimal VATrate1 { get; set; }

        /// <summary>
        ///Value of VAT rate В from 7 symbols in format ##.##%
        /// </summary>
        public decimal VATrate2 { get; set; }

        /// <summary>
        ///Value of VAT rate Г from 7 symbols in format ##.##%
        /// </summary>
        public decimal VATrate3 { get; set; }

        /// <summary>
        ///Value of VAT rate Д from 7 symbols in format ##.##%
        /// </summary>
        public decimal VATrate4 { get; set; }

        /// <summary>
        ///Value of VAT rate Е from 7 symbols in format ##.##%
        /// </summary>
        public decimal VATrate5 { get; set; }

        /// <summary>
        ///Value of VAT rate Ж from 7 symbols in format ##.##%
        /// </summary>
        public decimal VATrate6 { get; set; }

        /// <summary>
        ///Value of VAT rate З from 7 symbols in format ##.##%
        /// </summary>
        public decimal VATrate7 { get; set; }
    }

    public class DailyReceivedSalesAmountsRes
    {
        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 0
        /// </summary>
        public decimal AmountPayment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 1
        /// </summary>
        public decimal AmountPayment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 2
        /// </summary>
        public decimal AmountPayment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 3
        /// </summary>
        public decimal AmountPayment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 4
        /// </summary>
        public decimal AmountPayment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 5
        /// </summary>
        public decimal AmountPayment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 6
        /// </summary>
        public decimal AmountPayment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 7
        /// </summary>
        public decimal AmountPayment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 8
        /// </summary>
        public decimal AmountPayment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 9
        /// </summary>
        public decimal AmountPayment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 10
        /// </summary>
        public decimal AmountPayment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 11
        /// </summary>
        public decimal AmountPayment11 { get; set; }
    }

    public class RegistrationInfoRes
    {
        /// <summary>
        ///13 symbols for Unique Identification Code
        /// </summary>
        public string UIC { get; set; }

        /// <summary>
        ///1 symbol for type of Unique Identification Code: 
        ///  - '0' - Bulstat 
        ///  - '1' - EGN 
        ///  - '2' - Foreigner Number 
        ///  - '3' - NRA Official Number
        /// </summary>
        public OptionUICType OptionUICType { get; set; }

        /// <summary>
        ///Register number on the Fiscal device from NRA
        /// </summary>
        public string NRARegistrationNumber { get; set; }

        /// <summary>
        ///Date of registration in NRA
        /// </summary>
        public DateTime NRARegistrationDate { get; set; }
    }

    public class DailyPObyOperatorRes
    {
        /// <summary>
        ///Symbols from 1 to 20corresponding to operator's number
        /// </summary>
        public decimal OperNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 0
        /// </summary>
        public decimal AmountPO_Payment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 1
        /// </summary>
        public decimal AmountPO_Payment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 2
        /// </summary>
        public decimal AmountPO_Payment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 3
        /// </summary>
        public decimal AmountPO_Payment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 4
        /// </summary>
        public decimal AmountPO_Payment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 5
        /// </summary>
        public decimal AmountPO_Payment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 6
        /// </summary>
        public decimal AmountPO_Payment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 7
        /// </summary>
        public decimal AmountPO_Payment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 8
        /// </summary>
        public decimal AmountPO_Payment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 9
        /// </summary>
        public decimal AmountPO_Payment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 10
        /// </summary>
        public decimal AmountPO_Payment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the PO by type of payment 11
        /// </summary>
        public decimal AmountPO_Payment11 { get; set; }

        /// <summary>
        ///5 symbols for the total number of operations
        /// </summary>
        public decimal NoPO { get; set; }
    }

    public class DailySaleAndStornoAmountsByVATRes
    {
        /// <summary>
        ///Up to 13 symbols for the amount accumulated from sales by VAT group А
        /// </summary>
        public decimal SaleAmountVATGr0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from sales by VAT group Б
        /// </summary>
        public decimal SaleAmountVATGr1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from sales by VAT group В
        /// </summary>
        public decimal SaleAmountVATGr2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from sales by VAT group Г
        /// </summary>
        public decimal SaleAmountVATGr3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from sales by VAT group Д
        /// </summary>
        public decimal SaleAmountVATGr4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from sales by VAT group Е
        /// </summary>
        public decimal SaleAmountVATGr5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from sales by VAT group Ж
        /// </summary>
        public decimal SaleAmountVATGr6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from sales by VAT group З
        /// </summary>
        public decimal SaleAmountVATGr7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for sum of all VAT groups
        /// </summary>
        public decimal SumAllVATGr { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by VAT group А
        /// </summary>
        public decimal StornoAmountVATGr0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by VAT group Б
        /// </summary>
        public decimal StornoAmountVATGr1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by VAT group В
        /// </summary>
        public decimal StornoAmountVATGr2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by VAT group Г
        /// </summary>
        public decimal StornoAmountVATGr3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by VAT group Д
        /// </summary>
        public decimal StornoAmountVATGr4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by VAT group Е
        /// </summary>
        public decimal StornoAmountVATGr5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by VAT group Ж
        /// </summary>
        public decimal StornoAmountVATGr6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by VAT group З
        /// </summary>
        public decimal StornoAmountVATGr7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the amount accumulated from Storno by all groups
        /// </summary>
        public decimal StornoAllVATGr { get; set; }
    }

    public class DailyCountersRes
    {
        /// <summary>
        ///Up to 5 symbols for number of the last report from reset
        /// </summary>
        public decimal LastReportNumFromReset { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of the last FM report
        /// </summary>
        public decimal LastFMBlockNum { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of EJ
        /// </summary>
        public decimal EJNum { get; set; }

        /// <summary>
        ///16 symbols for date and time of the last block storage in FM in 
        /// format "DD-MM-YYYY HH:MM"
        /// </summary>
        public DateTime DateTime { get; set; }
    }

    public class DailyRAbyOperatorRes
    {
        /// <summary>
        ///Symbols from 1 to 20corresponding to operator's number
        /// </summary>
        public decimal OperNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 0
        /// </summary>
        public decimal AmountRA_Payment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 1
        /// </summary>
        public decimal AmountRA_Payment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 2
        /// </summary>
        public decimal AmountRA_Payment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 3
        /// </summary>
        public decimal AmountRA_Payment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 4
        /// </summary>
        public decimal AmountRA_Payment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 5
        /// </summary>
        public decimal AmountRA_Payment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 6
        /// </summary>
        public decimal AmountRA_Payment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 7
        /// </summary>
        public decimal AmountRA_Payment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 8
        /// </summary>
        public decimal AmountRA_Payment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 9
        /// </summary>
        public decimal AmountRA_Payment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 10
        /// </summary>
        public decimal AmountRA_Payment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the RA by type of payment 11
        /// </summary>
        public decimal AmountRA_Payment11 { get; set; }

        /// <summary>
        ///5 symbols for the total number of operations
        /// </summary>
        public string NoRA { get; set; }
    }

    public class HeaderRes
    {
        /// <summary>
        ///(Line Number) 1 symbol with value: 
        ///  - '1' - Header 1 
        ///  - '2' - Header 2 
        ///  - '3' - Header 3 
        ///  - '4' - Header 4 
        ///  - '5' - Header 5 
        ///  - '6' - Header 6 
        ///  - '7' - Header 7
        /// </summary>
        public OptionHeaderLine OptionHeaderLine { get; set; }

        /// <summary>
        ///TextLength symbols for header lines
        /// </summary>
        public string HeaderText { get; set; }
    }

    public class PLUgeneralRes
    {
        /// <summary>
        ///5 symbols for article number with leading zeroes in format #####
        /// </summary>
        public decimal PLUNum { get; set; }

        /// <summary>
        ///34 symbols for article name, new line=0x7C.
        /// </summary>
        public string PLUName { get; set; }

        /// <summary>
        ///Up to 10 symbols for article price
        /// </summary>
        public decimal Price { get; set; }

        /// <summary>
        ///1 symbol for price flag with next value: 
        ///  - '0'- Free price is disable valid only programmed price 
        ///  - '1'- Free price is enable 
        ///  - '2'- Limited price
        /// </summary>
        public OptionPrice OptionPrice { get; set; }

        /// <summary>
        ///1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden
        /// </summary>
        public OptionVATClass OptionVATClass { get; set; }

        /// <summary>
        ///BelongToDepNumber + 80h, 1 symbol for PLU department 
        /// attachment= 0x80 … 0x93
        /// </summary>
        public int BelongToDepNumber { get; set; }

        /// <summary>
        ///Up to 13 symbols for PLU accumulated turnover
        /// </summary>
        public decimal TurnoverAmount { get; set; }

        /// <summary>
        ///Up to 13 symbols for Sales quantity of the article
        /// </summary>
        public decimal SoldQuantity { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated storno amount
        /// </summary>
        public decimal StornoAmount { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated storno quantiy
        /// </summary>
        public decimal StornoQuantity { get; set; }

        /// <summary>
        ///Up to 5 symbols for the number of the last article report with zeroing
        /// </summary>
        public decimal LastZReportNumber { get; set; }

        /// <summary>
        ///16 symbols for the date and time of the last article report with zeroing in 
        /// format DD-MM-YYYY HH:MM
        /// </summary>
        public DateTime LastZReportDate { get; set; }

        /// <summary>
        ///1 symbol with value: 
        ///  - '0' - Inactive, default value 
        ///  - '1' - Active Single transaction in receipt
        /// </summary>
        public OptionSingleTransaction OptionSingleTransaction { get; set; }
    }

    public class DailyReceivedSalesAmountsByOperatorRes
    {
        /// <summary>
        ///Symbols from 1 to 20 corresponding to operator's number
        /// </summary>
        public decimal OperNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 0
        /// </summary>
        public decimal ReceivedSalesAmountPayment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 1
        /// </summary>
        public decimal ReceivedSalesAmountPayment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 2
        /// </summary>
        public decimal ReceivedSalesAmountPayment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 3
        /// </summary>
        public decimal ReceivedSalesAmountPayment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 4
        /// </summary>
        public decimal ReceivedSalesAmountPayment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 5
        /// </summary>
        public decimal ReceivedSalesAmountPayment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 6
        /// </summary>
        public decimal ReceivedSalesAmountPayment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 7
        /// </summary>
        public decimal ReceivedSalesAmountPayment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 8
        /// </summary>
        public decimal ReceivedSalesAmountPayment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 9
        /// </summary>
        public decimal ReceivedSalesAmountPayment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 10
        /// </summary>
        public decimal ReceivedSalesAmountPayment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by sales for payment 11
        /// </summary>
        public decimal ReceivedSalesAmountPayment11 { get; set; }
    }

    public class CustomerDataRes
    {
        /// <summary>
        ///(Customer Number) 4 symbols for customer number in format ####
        /// </summary>
        public decimal CustomerNum { get; set; }

        /// <summary>
        ///(Company name) 26 symbols for customer name
        /// </summary>
        public string CustomerCompanyName { get; set; }

        /// <summary>
        ///(Buyer Name) 16 symbols for Buyer name
        /// </summary>
        public string CustomerFullName { get; set; }

        /// <summary>
        ///13 symbols for VAT number on customer
        /// </summary>
        public string VATNumber { get; set; }

        /// <summary>
        ///13 symbols for customer Unique Identification Code
        /// </summary>
        public string UIC { get; set; }

        /// <summary>
        ///30 symbols for address on customer
        /// </summary>
        public string Address { get; set; }

        /// <summary>
        ///1 symbol for type of Unique Identification Code:  
        ///  - '0' - Bulstat 
        ///  - '1' - EGN 
        ///  - '2' - Foreigner Number 
        ///  - '3' - NRA Official Number
        /// </summary>
        public OptionUICType OptionUICType { get; set; }
    }

    public class CurrentReceiptInfoRes
    {
        /// <summary>
        ///1 symbol with value: 
        ///  - '0' - No 
        ///  - '1' - Yes
        /// </summary>
        public OptionIsReceiptOpened OptionIsReceiptOpened { get; set; }

        /// <summary>
        ///3 symbols for number of sales in format ###
        /// </summary>
        public decimal SalesNumber { get; set; }

        /// <summary>
        ///Up to 13 symbols for subtotal by VAT group А
        /// </summary>
        public decimal SubtotalAmountVAT0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for subtotal by VAT group Б
        /// </summary>
        public decimal SubtotalAmountVAT1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for subtotal by VAT group В
        /// </summary>
        public decimal SubtotalAmountVAT2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for subtotal by VAT group Г
        /// </summary>
        public decimal SubtotalAmountVAT3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for subtotal by VAT group Д
        /// </summary>
        public decimal SubtotalAmountVAT4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for subtotal by VAT group Е
        /// </summary>
        public decimal SubtotalAmountVAT5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for subtotal by VAT group Ж
        /// </summary>
        public decimal SubtotalAmountVAT6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for subtotal by VAT group З
        /// </summary>
        public decimal SubtotalAmountVAT7 { get; set; }

        /// <summary>
        ///1 symbol with value: 
        /// - '0' - allowed 
        /// - '1' - forbidden
        /// </summary>
        public OptionForbiddenVoid OptionForbiddenVoid { get; set; }

        /// <summary>
        ///1 symbol with value: 
        /// - '0' - No 
        /// - '1' - Yes
        /// </summary>
        public OptionVATinReceipt OptionVATinReceipt { get; set; }

        /// <summary>
        ///(Format) 1 symbol with value: 
        ///  - '1' - Detailed 
        ///  - '0' - Brief
        /// </summary>
        public OptionReceiptFormat OptionReceiptFormat { get; set; }

        /// <summary>
        ///1 symbol with value: 
        /// - '0' - No 
        /// - '1' - Yes
        /// </summary>
        public OptionInitiatedPayment OptionInitiatedPayment { get; set; }

        /// <summary>
        ///1 symbol with value: 
        /// - '0' - No 
        /// - '1' - Yes
        /// </summary>
        public OptionFinalizedPayment OptionFinalizedPayment { get; set; }

        /// <summary>
        ///1 symbol with value: 
        /// - '0' - No 
        /// - '1' - Yes
        /// </summary>
        public OptionPowerDownInReceipt OptionPowerDownInReceipt { get; set; }

        /// <summary>
        ///(Receipt and Printing type) 1 symbol with value: 
        ///  - '0' - Sales receipt printing step by step 
        ///  - '2' - Sales receipt Postponed Printing 
        ///  - '4' - Storno receipt printing step by step 
        ///  - '6' - Storno receipt Postponed Printing 
        ///  - '1' - Invoice sales receipt printing step by step 
        ///  - '3' - Invoice sales receipt Postponed Printing 
        ///  - '5' - Invoice Credit note receipt printing step by step 
        ///  - '7' - Invoice Credit note receipt Postponed Printing
        /// </summary>
        public OptionTypeReceipt OptionTypeReceipt { get; set; }

        /// <summary>
        ///Up to 13 symbols the amount of the due change in the stated payment type
        /// </summary>
        public decimal ChangeAmount { get; set; }

        /// <summary>
        ///1 symbol with value: 
        ///  - '0' - Change In Cash 
        ///  - '1' - Same As The payment 
        ///  - '2' - Change In Currency
        /// </summary>
        public OptionChangeType OptionChangeType { get; set; }

        /// <summary>
        ///6 symbols for fiscal receipt number in format ######
        /// </summary>
        public decimal CurrentReceiptNumber { get; set; }
    }

    public class PLUallDataRes
    {
        /// <summary>
        ///5 symbols for article number with leading zeroes in format: #####
        /// </summary>
        public decimal PLUNum { get; set; }

        /// <summary>
        ///34 symbols for article name, new line=0x7C.
        /// </summary>
        public string PLUName { get; set; }

        /// <summary>
        ///Up to 10 symbols for article price
        /// </summary>
        public decimal Price { get; set; }

        /// <summary>
        ///1 symbol for flags = 0x80 + FlagSinglTr + FlagQTY + OptionPrice 
        /// Where  
        /// OptionPrice: 
        /// 0x00 - for free price is disable valid only programmed price 
        /// 0x01 - for free price is enable 
        /// 0x02 - for limited price 
        /// FlagQTY: 
        /// 0x00 - for availability of PLU stock is not monitored 
        /// 0x04 - for disable negative quantity 
        /// 0x08 - for enable negative quantity 
        /// FlagSingleTr: 
        /// 0x00 - no single transaction 
        /// 0x10 - single transaction is active
        /// </summary>
        public byte FlagsPricePLU { get; set; }

        /// <summary>
        ///1 character for VAT class: 
        ///  - 'А' - VAT Class 0 
        ///  - 'Б' - VAT Class 1 
        ///  - 'В' - VAT Class 2 
        ///  - 'Г' - VAT Class 3 
        ///  - 'Д' - VAT Class 4 
        ///  - 'Е' - VAT Class 5 
        ///  - 'Ж' - VAT Class 6 
        ///  - 'З' - VAT Class 7 
        ///  - '*' - Forbidden
        /// </summary>
        public OptionVATClass OptionVATClass { get; set; }

        /// <summary>
        ///BelongToDepNumber + 80h, 1 symbol for PLU department 
        /// attachment = 0x80 … 0x93
        /// </summary>
        public int BelongToDepNumber { get; set; }

        /// <summary>
        ///Up to 13 symbols for PLU accumulated turnover
        /// </summary>
        public decimal TurnoverAmount { get; set; }

        /// <summary>
        ///Up to 13 symbols for Sales quantity of the article
        /// </summary>
        public decimal SoldQuantity { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated storno amount
        /// </summary>
        public decimal StornoAmount { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated storno quantiy
        /// </summary>
        public decimal StornoQuantity { get; set; }

        /// <summary>
        ///Up to 5 symbols for the number of the last article report with zeroing
        /// </summary>
        public decimal LastZReportNumber { get; set; }

        /// <summary>
        ///16 symbols for the date and time of the last article report with zeroing 
        /// in format DD-MM-YYYY HH:MM
        /// </summary>
        public DateTime LastZReportDate { get; set; }

        /// <summary>
        ///(Available Quantity) Up to 11 symbols for quantity in stock
        /// </summary>
        public decimal AvailableQuantity { get; set; }

        /// <summary>
        ///13 symbols for article barcode
        /// </summary>
        public string Barcode { get; set; }
    }

    public class LastDailyReportInfoRes
    {
        /// <summary>
        ///10 symbols for last Z-report date in DD-MM-YYYY format
        /// </summary>
        public DateTime LastZDailyReportDate { get; set; }

        /// <summary>
        ///Up to 4 symbols for the number of the last daily report
        /// </summary>
        public decimal LastZDailyReportNum { get; set; }

        /// <summary>
        ///Up to 4 symbols for the number of the last RAM reset
        /// </summary>
        public decimal LastRAMResetNum { get; set; }

        /// <summary>
        ///6 symbols for the total number of receipts in format ######
        /// </summary>
        public decimal TotalReceiptCounter { get; set; }

        /// <summary>
        ///Date Time parameter in format: DD-MM-YYYY HH:MM:SS
        /// </summary>
        public DateTime DateTimeLastFiscRec { get; set; }

        /// <summary>
        ///Up to 2 symbols for number of EJ
        /// </summary>
        public string EJNum { get; set; }

        /// <summary>
        ///(Receipt and Printing type) 1 symbol with value: 
        ///  - '0' - Sales receipt printing step by step 
        ///  - '2' - Sales receipt Postponed Printing 
        ///  - '4' - Storno receipt printing step by step 
        ///  - '6' - Storno receipt Postponed Printing 
        ///  - '1' - Invoice sales receipt printing step by step 
        ///  - '3' - Invoice sales receipt Postponed Printing 
        ///  - '5' - Invoice Credit note receipt printing step by step 
        ///  - '7' - Invoice Credit note receipt Postponed Printing
        /// </summary>
        public OptionTypeReceipt OptionTypeReceipt { get; set; }
    }

    public class StatusRes
    {
        /// <summary>
        ///FM Read only
        /// </summary>
        public bool FM_Read_only { get; set; }

        /// <summary>
        ///Power down in opened fiscal receipt
        /// </summary>
        public bool Power_down_in_opened_fiscal_receipt { get; set; }

        /// <summary>
        ///Printer not ready - overheat
        /// </summary>
        public bool Printer_not_ready_overheat { get; set; }

        /// <summary>
        ///DateTime not set
        /// </summary>
        public bool DateTime_not_set { get; set; }

        /// <summary>
        ///DateTime wrong
        /// </summary>
        public bool DateTime_wrong { get; set; }

        /// <summary>
        ///RAM reset
        /// </summary>
        public bool RAM_reset { get; set; }

        /// <summary>
        ///Hardware clock error
        /// </summary>
        public bool Hardware_clock_error { get; set; }

        /// <summary>
        ///Printer not ready - no paper
        /// </summary>
        public bool Printer_not_ready_no_paper { get; set; }

        /// <summary>
        ///Reports registers Overflow
        /// </summary>
        public bool Reports_registers_Overflow { get; set; }

        /// <summary>
        ///Customer report is not zeroed
        /// </summary>
        public bool Customer_report_is_not_zeroed { get; set; }

        /// <summary>
        ///Daily report is not zeroed
        /// </summary>
        public bool Daily_report_is_not_zeroed { get; set; }

        /// <summary>
        ///Article report is not zeroed
        /// </summary>
        public bool Article_report_is_not_zeroed { get; set; }

        /// <summary>
        ///Operator report is not zeroed
        /// </summary>
        public bool Operator_report_is_not_zeroed { get; set; }

        /// <summary>
        ///Duplicate printed
        /// </summary>
        public bool Duplicate_printed { get; set; }

        /// <summary>
        ///Opened Non-fiscal Receipt
        /// </summary>
        public bool Opened_Non_fiscal_Receipt { get; set; }

        /// <summary>
        ///Opened Fiscal Receipt
        /// </summary>
        public bool Opened_Fiscal_Receipt { get; set; }

        /// <summary>
        ///Opened Fiscal Detailed Receipt
        /// </summary>
        public bool Opened_Fiscal_Detailed_Receipt { get; set; }

        /// <summary>
        ///Opened Fiscal Receipt with VAT
        /// </summary>
        public bool Opened_Fiscal_Receipt_with_VAT { get; set; }

        /// <summary>
        ///Opened Invoice Fiscal Receipt
        /// </summary>
        public bool Opened_Invoice_Fiscal_Receipt { get; set; }

        /// <summary>
        ///SD card near full
        /// </summary>
        public bool SD_card_near_full { get; set; }

        /// <summary>
        ///SD card full
        /// </summary>
        public bool SD_card_full { get; set; }

        /// <summary>
        ///No FM module
        /// </summary>
        public bool No_FM_module { get; set; }

        /// <summary>
        ///FM error
        /// </summary>
        public bool FM_error { get; set; }

        /// <summary>
        ///FM full
        /// </summary>
        public bool FM_full { get; set; }

        /// <summary>
        ///FM near full
        /// </summary>
        public bool FM_near_full { get; set; }

        /// <summary>
        ///Decimal point (1=fract, 0=whole)
        /// </summary>
        public bool Decimal_point { get; set; }

        /// <summary>
        ///FM fiscalized
        /// </summary>
        public bool FM_fiscalized { get; set; }

        /// <summary>
        ///FM produced
        /// </summary>
        public bool FM_produced { get; set; }

        /// <summary>
        ///Printer: automatic cutting
        /// </summary>
        public bool Printer_automatic_cutting { get; set; }

        /// <summary>
        ///External display: transparent display
        /// </summary>
        public bool External_display_transparent_display { get; set; }

        /// <summary>
        ///Speed is 9600
        /// </summary>
        public bool Speed_is_9600 { get; set; }

        /// <summary>
        ///Drawer: automatic opening
        /// </summary>
        public bool Drawer_automatic_opening { get; set; }

        /// <summary>
        ///Customer logo included in the receipt
        /// </summary>
        public bool Customer_logo_included_in_the_receipt { get; set; }

        /// <summary>
        ///Wrong SIM card
        /// </summary>
        public bool Wrong_SIM_card { get; set; }

        /// <summary>
        ///Blocking 3 days without mobile operator
        /// </summary>
        public bool Blocking_3_days_without_mobile_operator { get; set; }

        /// <summary>
        ///No task from NRA
        /// </summary>
        public bool No_task_from_NRA { get; set; }

        /// <summary>
        ///Wrong SD card
        /// </summary>
        public bool Wrong_SD_card { get; set; }

        /// <summary>
        ///Deregistered
        /// </summary>
        public bool Deregistered { get; set; }

        /// <summary>
        ///No SIM card
        /// </summary>
        public bool No_SIM_card { get; set; }

        /// <summary>
        ///No GPRS Modem
        /// </summary>
        public bool No_GPRS_Modem { get; set; }

        /// <summary>
        ///No mobile operator
        /// </summary>
        public bool No_mobile_operator { get; set; }

        /// <summary>
        ///No GPRS service
        /// </summary>
        public bool No_GPRS_service { get; set; }

        /// <summary>
        ///Near end of paper
        /// </summary>
        public bool Near_end_of_paper { get; set; }

        /// <summary>
        ///Unsent data for 24 hours
        /// </summary>
        public bool Unsent_data_for_24_hours { get; set; }
    }

    public class PLUpriceRes
    {
        /// <summary>
        ///5 symbols for article number with leading zeroes in format #####
        /// </summary>
        public decimal PLUNum { get; set; }

        /// <summary>
        ///Up to 10 symbols for article price
        /// </summary>
        public decimal Price { get; set; }

        /// <summary>
        ///1 symbol for price flag with next value: 
        ///  - '0'- Free price is disable valid only programmed price 
        ///  - '1'- Free price is enable 
        ///  - '2'- Limited price
        /// </summary>
        public OptionPrice OptionPrice { get; set; }
    }

    public class OperatorNamePasswordRes
    {
        /// <summary>
        ///Symbol from 1 to 20 corresponding to the number of operator
        /// </summary>
        public decimal Number { get; set; }

        /// <summary>
        ///20 symbols for operator's name
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        ///6 symbols for operator's password
        /// </summary>
        public string Password { get; set; }
    }

    public class DailyCountersByOperatorRes
    {
        /// <summary>
        ///Symbols from 1 to 20 corresponding to operator's number
        /// </summary>
        public decimal OperNum { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of the work operators
        /// </summary>
        public decimal WorkOperatorsCounter { get; set; }

        /// <summary>
        ///16 symbols for date and time of the last operator's report in 
        /// format DD-MM-YYYY HH:MM
        /// </summary>
        public DateTime LastOperatorReportDateTime { get; set; }
    }

    public class PaymentsRes
    {
        /// <summary>
        ///10 symbols for payment name type 0
        /// </summary>
        public string NamePayment0 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 1
        /// </summary>
        public string NamePayment1 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 2
        /// </summary>
        public string NamePayment2 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 3
        /// </summary>
        public string NamePayment3 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 4
        /// </summary>
        public string NamePayment4 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 5
        /// </summary>
        public string NamePayment5 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 6
        /// </summary>
        public string NamePayment6 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 7
        /// </summary>
        public string NamePayment7 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 8
        /// </summary>
        public string NamePayment8 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 9
        /// </summary>
        public string NamePayment9 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 10
        /// </summary>
        public string NamePayment10 { get; set; }

        /// <summary>
        ///10 symbols for payment name type 11
        /// </summary>
        public string NamePayment11 { get; set; }

        /// <summary>
        ///10 symbols for exchange rate of payment type 11 in format: ####.#####
        /// </summary>
        public decimal ExchangeRate { get; set; }
    }

    public class DetailedPrinterStatusRes
    {
        /// <summary>
        ///1 symbol - connection with external display  
        ///  - 'Y' - Yes 
        ///  - 'N' - No
        /// </summary>
        public OptionExternalDisplay OptionExternalDisplay { get; set; }

        /// <summary>
        ///4 symbols for detailed status of printer (only for printers with ASB) 
        /// N 
        /// byte 
        /// N bit status flag 
        /// ST0 
        /// 0 Reserved 
        /// 1 Reserved 
        /// 2 Signal level for drawer  
        /// 
        /// 
        /// 3 Printer not ready 
        /// 4 Reserved 
        /// 5 Open cover 
        /// 6 Paper feed status 
        /// 7 Reserved 
        ///    
        /// ST1 
        /// 0 Reserved 
        /// 1 Reserved 
        /// 2 Reserved 
        /// 3 Cutter error
        /// </summary>
        public string StatPRN { get; set; }

        /// <summary>
        ///1 symbol with value: 
        ///  - 'J' - Yes  
        ///  - ' ' - No
        /// </summary>
        public byte FlagServiceJumper { get; set; }
    }

    public class PLUbarcodeRes
    {
        /// <summary>
        ///5 symbols for article number with leading zeroes in format #####
        /// </summary>
        public decimal PLUNum { get; set; }

        /// <summary>
        ///13 symbols for article barcode
        /// </summary>
        public string Barcode { get; set; }
    }

    public class DailyGeneralRegistersByOperatorRes
    {
        /// <summary>
        ///Symbols from 1 to 20 corresponding to operator's number
        /// </summary>
        public decimal OperNum { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of customers
        /// </summary>
        public decimal CustomersNum { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of discounts
        /// </summary>
        public decimal DiscountsNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated amount of discounts
        /// </summary>
        public decimal DiscountsAmount { get; set; }

        /// <summary>
        ///Up to 5 symbols for number ofadditions
        /// </summary>
        public decimal AdditionsNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated amount of additions
        /// </summary>
        public decimal AdditionsAmount { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of corrections
        /// </summary>
        public decimal CorrectionsNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated amount of corrections
        /// </summary>
        public decimal CorrectionsAmount { get; set; }
    }

    public class DailyRARes
    {
        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 0
        /// </summary>
        public decimal AmountPayment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 1
        /// </summary>
        public decimal AmountPayment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 2
        /// </summary>
        public decimal AmountPayment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 3
        /// </summary>
        public decimal AmountPayment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 4
        /// </summary>
        public decimal AmountPayment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 5
        /// </summary>
        public decimal AmountPayment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 6
        /// </summary>
        public decimal AmountPayment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 7
        /// </summary>
        public decimal AmountPayment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 8
        /// </summary>
        public decimal AmountPayment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 9
        /// </summary>
        public decimal AmountPayment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 10
        /// </summary>
        public decimal AmountPayment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 11
        /// </summary>
        public decimal AmountPayment11 { get; set; }

        /// <summary>
        ///Up to 5 symbols for the total number of operations
        /// </summary>
        public decimal RANum { get; set; }

        /// <summary>
        ///Up to 13 symbols to sum all payments
        /// </summary>
        public decimal SumAllPayment { get; set; }
    }

    public class GeneralDailyRegistersRes
    {
        /// <summary>
        ///Up to 5 symbols for number of customers
        /// </summary>
        public decimal CustomersNum { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of discounts
        /// </summary>
        public decimal DiscountsNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated amount of discounts
        /// </summary>
        public decimal DiscountsAmount { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of additions
        /// </summary>
        public decimal AdditionsNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated amount of additions
        /// </summary>
        public decimal AdditionsAmount { get; set; }

        /// <summary>
        ///Up to 5 symbols for number of corrections
        /// </summary>
        public decimal CorrectionsNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for accumulated amount of corrections
        /// </summary>
        public decimal CorrectionsAmount { get; set; }
    }

    public class GrandFiscalSalesAndStornoAmountsRes
    {
        /// <summary>
        ///Up to 14 symbols for sum of turnover in FD
        /// </summary>
        public decimal GrandFiscalTurnover { get; set; }

        /// <summary>
        ///Up to 14 symbols for sum of VAT value in FD
        /// </summary>
        public decimal GrandFiscalVAT { get; set; }

        /// <summary>
        ///Up to 14 symbols for sum of STORNO turnover in FD
        /// </summary>
        public decimal GrandFiscalStornoTurnover { get; set; }

        /// <summary>
        ///Up to 14 symbols for sum of STORNO VAT value in FD
        /// </summary>
        public decimal GrandFiscalStornoVAT { get; set; }
    }

    public class ParametersRes
    {
        /// <summary>
        ///(POS Number) 4 symbols for number of POS in format ####
        /// </summary>
        public decimal POSNum { get; set; }

        /// <summary>
        ///(Print Logo) 1 symbol of value: 
        ///  - '1' - Yes 
        ///  - '0' - No
        /// </summary>
        public OptionPrintLogo OptionPrintLogo { get; set; }

        /// <summary>
        ///(Auto Open Drawer) 1 symbol of value: 
        ///  - '1' - Yes 
        ///  - '0' - No
        /// </summary>
        public OptionAutoOpenDrawer OptionAutoOpenDrawer { get; set; }

        /// <summary>
        ///(Auto Cut) 1 symbol of value: 
        ///  - '1' - Yes 
        ///  - '0' - No
        /// </summary>
        public OptionAutoCut OptionAutoCut { get; set; }

        /// <summary>
        ///(External Display Management) 1 symbol of value: 
        ///  - '1' - Manuel 
        ///  - '0' - Auto
        /// </summary>
        public OptionExternalDispManagement OptionExternalDispManagement { get; set; }

        /// <summary>
        ///(Article Report) 1 symbol of value: 
        ///  - '1' - Detailed 
        ///  - '0' - Brief
        /// </summary>
        public OptionArticleReportType OptionArticleReportType { get; set; }

        /// <summary>
        ///(Enable Currency) 1 symbol of value: 
        ///  - '1' - Yes 
        ///  - '0' - No
        /// </summary>
        public OptionEnableCurrency OptionEnableCurrency { get; set; }

        /// <summary>
        ///(EJ Font) 1 symbol of value: 
        ///  - '1' - Low Font 
        ///  - '0' - Normal Font
        /// </summary>
        public OptionEJFontType OptionEJFontType { get; set; }

        /// <summary>
        ///(Work Operator Count) 1 symbol of value: 
        ///  - '1' - One 
        ///  - '0' - More
        /// </summary>
        public OptionWorkOperatorCount OptionWorkOperatorCount { get; set; }
    }

    public class VersionRes
    {
        /// <summary>
        ///1 or 2 symbols for type of fiscal device: 
        /// - '1' - ECR 
        /// - '11' - ECR for online store 
        /// - '2' - FPr 
        /// - '21' - FPr for online store 
        /// - '3' - Fuel 
        /// - '31' - Fuel system 
        /// - '5' - for FUVAS device
        /// </summary>
        public OptionDeviceType OptionDeviceType { get; set; }

        /// <summary>
        ///6 symbols for Certification Number of device model
        /// </summary>
        public string CertificateNum { get; set; }

        /// <summary>
        ///16 symbols for Certificate Date and time parameter  
        /// in format: DD-MM-YYYY HH:MM
        /// </summary>
        public DateTime CertificateDateTime { get; set; }

        /// <summary>
        ///Up to 50 symbols for Model name
        /// </summary>
        public string Model { get; set; }

        /// <summary>
        ///Up to 20 symbols for Version name and Check sum
        /// </summary>
        public string Version { get; set; }
    }

    public class DailyReturnedChangeAmountsByOperatorRes
    {
        /// <summary>
        ///Symbols from 1 to 20 corresponding to operator's number
        /// </summary>
        public decimal OperNum { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 0
        /// </summary>
        public decimal ChangeAmountPayment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 1
        /// </summary>
        public decimal ChangeAmountPayment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 2
        /// </summary>
        public decimal ChangeAmountPayment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 3
        /// </summary>
        public decimal ChangeAmountPayment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 4
        /// </summary>
        public decimal ChangeAmountPayment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 5
        /// </summary>
        public decimal ChangeAmountPayment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 6
        /// </summary>
        public decimal ChangeAmountPayment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 7
        /// </summary>
        public decimal ChangeAmountPayment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 8
        /// </summary>
        public decimal ChangeAmountPayment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 9
        /// </summary>
        public decimal ChangeAmountPayment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 10
        /// </summary>
        public decimal ChangeAmountPayment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for amounts received by type of payment 11
        /// </summary>
        public decimal ChangeAmountPayment11 { get; set; }
    }

    public class DailyPORes
    {
        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 0
        /// </summary>
        public decimal AmountPayment0 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 1
        /// </summary>
        public decimal AmountPayment1 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 2
        /// </summary>
        public decimal AmountPayment2 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 3
        /// </summary>
        public decimal AmountPayment3 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 4
        /// </summary>
        public decimal AmountPayment4 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 5
        /// </summary>
        public decimal AmountPayment5 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 6
        /// </summary>
        public decimal AmountPayment6 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 7
        /// </summary>
        public decimal AmountPayment7 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 8
        /// </summary>
        public decimal AmountPayment8 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 9
        /// </summary>
        public decimal AmountPayment9 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 10
        /// </summary>
        public decimal AmountPayment10 { get; set; }

        /// <summary>
        ///Up to 13 symbols for the accumulated amount by payment type 11
        /// </summary>
        public decimal AmountPayment11 { get; set; }

        /// <summary>
        ///Up to 5 symbols for the total number of operations
        /// </summary>
        public decimal PONum { get; set; }

        /// <summary>
        ///Up to 13 symbols to sum all payments
        /// </summary>
        public decimal SumAllPayment { get; set; }
    }
}
